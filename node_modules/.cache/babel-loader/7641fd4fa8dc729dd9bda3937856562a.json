{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { useContext, useState, useRef, useEffect } from 'react';\nimport { SubscriptionData } from \"../data/index.js\";\nimport { getApolloContext } from \"../context/index.js\";\nexport function useSubscription(subscription, options) {\n  var context = useContext(getApolloContext());\n  var updatedOptions = options ? __assign(__assign({}, options), {\n    subscription: subscription\n  }) : {\n    subscription: subscription\n  };\n  var _a = useState({\n      loading: !updatedOptions.skip,\n      error: undefined,\n      data: undefined\n    }),\n    result = _a[0],\n    setResult = _a[1];\n  var subscriptionDataRef = useRef();\n  function getSubscriptionDataRef() {\n    if (!subscriptionDataRef.current) {\n      subscriptionDataRef.current = new SubscriptionData({\n        options: updatedOptions,\n        context: context,\n        setResult: setResult\n      });\n    }\n    return subscriptionDataRef.current;\n  }\n  var subscriptionData = getSubscriptionDataRef();\n  subscriptionData.setOptions(updatedOptions, true);\n  subscriptionData.context = context;\n  useEffect(function () {\n    return subscriptionData.afterExecute();\n  });\n  useEffect(function () {\n    return subscriptionData.cleanup.bind(subscriptionData);\n  }, []);\n  return subscriptionData.execute(result);\n}","map":{"version":3,"sources":["../../../src/react/hooks/useSubscription.ts"],"names":[],"mappings":";AAAA,SAAS,UAAU,EAAE,QAAQ,EAAE,MAAM,EAAE,SAAS,QAAQ,OAAO;AAK/D,SAAS,gBAAgB,QAAQ,kBAAU;AAE3C,SAAS,gBAAgB,QAAQ,qBAAa;AAE9C,OAAM,SAAU,eAAe,CAC7B,YAAiE,EACjE,OAAoD,EAAA;EAEpD,IAAM,OAAO,GAAG,UAAU,CAAC,gBAAgB,EAAE,CAAC;EAC9C,IAAM,cAAc,GAAG,OAAO,GAC3B,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EAAM,OAAO,CAAA,EAAA;IAAE,YAAY,EAAA;EAAA,CAAA,CAAA,GAC1B;IAAE,YAAY,EAAA;EAAA,CAAE;EACd,IAAA,EAAA,GAAsB,QAAQ,CAAC;MACnC,OAAO,EAAE,CAAC,cAAc,CAAC,IAAI;MAC7B,KAAK,EAAE,SAAS;MAChB,IAAI,EAAE;KACP,CAAC;IAJK,MAAM,GAAA,EAAA,CAAA,CAAA,CAAA;IAAE,SAAS,GAAA,EAAA,CAAA,CAAA,CAItB;EAEF,IAAM,mBAAmB,GAAG,MAAM,EAAuC;EACzE,SAAS,sBAAsB,GAAA;IAC7B,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE;MAChC,mBAAmB,CAAC,OAAO,GAAG,IAAI,gBAAgB,CAAoB;QACpE,OAAO,EAAE,cAAc;QACvB,OAAO,EAAA,OAAA;QACP,SAAS,EAAA;OACV,CAAC;IACH;IACD,OAAO,mBAAmB,CAAC,OAAO;EACpC;EAEA,IAAM,gBAAgB,GAAG,sBAAsB,EAAE;EACjD,gBAAgB,CAAC,UAAU,CAAC,cAAc,EAAE,IAAI,CAAC;EACjD,gBAAgB,CAAC,OAAO,GAAG,OAAO;EAElC,SAAS,CAAC,YAAA;IAAM,OAAA,gBAAgB,CAAC,YAAY,EAAE;EAA/B,CAA+B,CAAC;EAChD,SAAS,CAAC,YAAA;IAAM,OAAA,gBAAgB,CAAC,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC;EAA/C,CAA+C,EAAE,EAAE,CAAC;EAEpE,OAAO,gBAAgB,CAAC,OAAO,CAAC,MAAM,CAAC;AACzC","sourcesContent":["import { useContext, useState, useRef, useEffect } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\n\nimport { SubscriptionHookOptions } from '../types/types';\nimport { SubscriptionData } from '../data';\nimport { OperationVariables } from '../../core';\nimport { getApolloContext } from '../context';\n\nexport function useSubscription<TData = any, TVariables = OperationVariables>(\n  subscription: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: SubscriptionHookOptions<TData, TVariables>\n) {\n  const context = useContext(getApolloContext());\n  const updatedOptions = options\n    ? { ...options, subscription }\n    : { subscription };\n  const [result, setResult] = useState({\n    loading: !updatedOptions.skip,\n    error: undefined,\n    data: undefined\n  });\n\n  const subscriptionDataRef = useRef<SubscriptionData<TData, TVariables>>();\n  function getSubscriptionDataRef() {\n    if (!subscriptionDataRef.current) {\n      subscriptionDataRef.current = new SubscriptionData<TData, TVariables>({\n        options: updatedOptions,\n        context,\n        setResult\n      });\n    }\n    return subscriptionDataRef.current;\n  }\n\n  const subscriptionData = getSubscriptionDataRef();\n  subscriptionData.setOptions(updatedOptions, true);\n  subscriptionData.context = context;\n\n  useEffect(() => subscriptionData.afterExecute());\n  useEffect(() => subscriptionData.cleanup.bind(subscriptionData), []);\n\n  return subscriptionData.execute(result);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}