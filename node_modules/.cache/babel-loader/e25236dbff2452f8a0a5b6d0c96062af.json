{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { KeyTrie } from 'optimism';\nimport { invariant, InvariantError } from 'ts-invariant';\nimport { getFragmentFromSelection, isField, getTypenameFromResult, storeKeyNameFromField, argumentsObjectFromField, isReference, getStoreKeyName, canUseWeakMap, compact } from \"../../utilities/index.js\";\nimport { hasOwn, fieldNameFromStoreName, storeValueIsStoreObject, selectionSetMatchesResult, TypeOrFieldNameRegExp } from \"./helpers.js\";\nimport { cacheSlot } from \"./reactiveVars.js\";\nfunction argsFromFieldSpecifier(spec) {\n  return spec.args !== void 0 ? spec.args : spec.field ? argumentsObjectFromField(spec.field, spec.variables) : null;\n}\nexport var defaultDataIdFromObject = function defaultDataIdFromObject(_a, context) {\n  var __typename = _a.__typename,\n    id = _a.id,\n    _id = _a._id;\n  if (typeof __typename === \"string\") {\n    if (context) {\n      context.keyObject = id !== void 0 ? {\n        id: id\n      } : _id !== void 0 ? {\n        _id: _id\n      } : void 0;\n    }\n    if (id === void 0) id = _id;\n    if (id !== void 0) {\n      return __typename + \":\" + (typeof id === \"number\" || typeof id === \"string\" ? id : JSON.stringify(id));\n    }\n  }\n};\nvar nullKeyFieldsFn = function nullKeyFieldsFn() {\n  return void 0;\n};\nvar simpleKeyArgsFn = function simpleKeyArgsFn(_args, context) {\n  return context.fieldName;\n};\nvar mergeTrueFn = function mergeTrueFn(existing, incoming, _a) {\n  var mergeObjects = _a.mergeObjects;\n  return mergeObjects(existing, incoming);\n};\nvar mergeFalseFn = function mergeFalseFn(_, incoming) {\n  return incoming;\n};\nvar Policies = function () {\n  function Policies(config) {\n    this.config = config;\n    this.typePolicies = Object.create(null);\n    this.toBeAdded = Object.create(null);\n    this.supertypeMap = new Map();\n    this.fuzzySubtypes = new Map();\n    this.rootIdsByTypename = Object.create(null);\n    this.rootTypenamesById = Object.create(null);\n    this.usingPossibleTypes = false;\n    this.config = __assign({\n      dataIdFromObject: defaultDataIdFromObject\n    }, config);\n    this.cache = this.config.cache;\n    this.setRootTypename(\"Query\");\n    this.setRootTypename(\"Mutation\");\n    this.setRootTypename(\"Subscription\");\n    if (config.possibleTypes) {\n      this.addPossibleTypes(config.possibleTypes);\n    }\n    if (config.typePolicies) {\n      this.addTypePolicies(config.typePolicies);\n    }\n  }\n  Policies.prototype.identify = function (object, selectionSet, fragmentMap) {\n    var typename = selectionSet && fragmentMap ? getTypenameFromResult(object, selectionSet, fragmentMap) : object.__typename;\n    if (typename === this.rootTypenamesById.ROOT_QUERY) {\n      return [\"ROOT_QUERY\"];\n    }\n    var context = {\n      typename: typename,\n      selectionSet: selectionSet,\n      fragmentMap: fragmentMap\n    };\n    var id;\n    var policy = typename && this.getTypePolicy(typename);\n    var keyFn = policy && policy.keyFn || this.config.dataIdFromObject;\n    while (keyFn) {\n      var specifierOrId = keyFn(object, context);\n      if (Array.isArray(specifierOrId)) {\n        keyFn = keyFieldsFnFromSpecifier(specifierOrId);\n      } else {\n        id = specifierOrId;\n        break;\n      }\n    }\n    id = id ? String(id) : void 0;\n    return context.keyObject ? [id, context.keyObject] : [id];\n  };\n  Policies.prototype.addTypePolicies = function (typePolicies) {\n    var _this = this;\n    Object.keys(typePolicies).forEach(function (typename) {\n      var _a = typePolicies[typename],\n        queryType = _a.queryType,\n        mutationType = _a.mutationType,\n        subscriptionType = _a.subscriptionType,\n        incoming = __rest(_a, [\"queryType\", \"mutationType\", \"subscriptionType\"]);\n      if (queryType) _this.setRootTypename(\"Query\", typename);\n      if (mutationType) _this.setRootTypename(\"Mutation\", typename);\n      if (subscriptionType) _this.setRootTypename(\"Subscription\", typename);\n      if (hasOwn.call(_this.toBeAdded, typename)) {\n        _this.toBeAdded[typename].push(incoming);\n      } else {\n        _this.toBeAdded[typename] = [incoming];\n      }\n    });\n  };\n  Policies.prototype.updateTypePolicy = function (typename, incoming) {\n    var _this = this;\n    var existing = this.getTypePolicy(typename);\n    var keyFields = incoming.keyFields,\n      fields = incoming.fields;\n    function setMerge(existing, merge) {\n      existing.merge = typeof merge === \"function\" ? merge : merge === true ? mergeTrueFn : merge === false ? mergeFalseFn : existing.merge;\n    }\n    setMerge(existing, incoming.merge);\n    existing.keyFn = keyFields === false ? nullKeyFieldsFn : Array.isArray(keyFields) ? keyFieldsFnFromSpecifier(keyFields) : typeof keyFields === \"function\" ? keyFields : existing.keyFn;\n    if (fields) {\n      Object.keys(fields).forEach(function (fieldName) {\n        var existing = _this.getFieldPolicy(typename, fieldName, true);\n        var incoming = fields[fieldName];\n        if (typeof incoming === \"function\") {\n          existing.read = incoming;\n        } else {\n          var keyArgs = incoming.keyArgs,\n            read = incoming.read,\n            merge = incoming.merge;\n          existing.keyFn = keyArgs === false ? simpleKeyArgsFn : Array.isArray(keyArgs) ? keyArgsFnFromSpecifier(keyArgs) : typeof keyArgs === \"function\" ? keyArgs : existing.keyFn;\n          if (typeof read === \"function\") {\n            existing.read = read;\n          }\n          setMerge(existing, merge);\n        }\n        if (existing.read && existing.merge) {\n          existing.keyFn = existing.keyFn || simpleKeyArgsFn;\n        }\n      });\n    }\n  };\n  Policies.prototype.setRootTypename = function (which, typename) {\n    if (typename === void 0) {\n      typename = which;\n    }\n    var rootId = \"ROOT_\" + which.toUpperCase();\n    var old = this.rootTypenamesById[rootId];\n    if (typename !== old) {\n      process.env.NODE_ENV === \"production\" ? invariant(!old || old === which, 1) : invariant(!old || old === which, \"Cannot change root \" + which + \" __typename more than once\");\n      if (old) delete this.rootIdsByTypename[old];\n      this.rootIdsByTypename[typename] = rootId;\n      this.rootTypenamesById[rootId] = typename;\n    }\n  };\n  Policies.prototype.addPossibleTypes = function (possibleTypes) {\n    var _this = this;\n    this.usingPossibleTypes = true;\n    Object.keys(possibleTypes).forEach(function (supertype) {\n      _this.getSupertypeSet(supertype, true);\n      possibleTypes[supertype].forEach(function (subtype) {\n        _this.getSupertypeSet(subtype, true).add(supertype);\n        var match = subtype.match(TypeOrFieldNameRegExp);\n        if (!match || match[0] !== subtype) {\n          _this.fuzzySubtypes.set(subtype, new RegExp(subtype));\n        }\n      });\n    });\n  };\n  Policies.prototype.getTypePolicy = function (typename) {\n    var _this = this;\n    if (!hasOwn.call(this.typePolicies, typename)) {\n      var policy_1 = this.typePolicies[typename] = Object.create(null);\n      policy_1.fields = Object.create(null);\n      var supertypes = this.supertypeMap.get(typename);\n      if (supertypes && supertypes.size) {\n        supertypes.forEach(function (supertype) {\n          var _a = _this.getTypePolicy(supertype),\n            fields = _a.fields,\n            rest = __rest(_a, [\"fields\"]);\n          Object.assign(policy_1, rest);\n          Object.assign(policy_1.fields, fields);\n        });\n      }\n    }\n    var inbox = this.toBeAdded[typename];\n    if (inbox && inbox.length) {\n      this.updateTypePolicy(typename, compact.apply(void 0, inbox.splice(0)));\n    }\n    return this.typePolicies[typename];\n  };\n  Policies.prototype.getFieldPolicy = function (typename, fieldName, createIfMissing) {\n    if (typename) {\n      var fieldPolicies = this.getTypePolicy(typename).fields;\n      return fieldPolicies[fieldName] || createIfMissing && (fieldPolicies[fieldName] = Object.create(null));\n    }\n  };\n  Policies.prototype.getSupertypeSet = function (subtype, createIfMissing) {\n    var supertypeSet = this.supertypeMap.get(subtype);\n    if (!supertypeSet && createIfMissing) {\n      this.supertypeMap.set(subtype, supertypeSet = new Set());\n    }\n    return supertypeSet;\n  };\n  Policies.prototype.fragmentMatches = function (fragment, typename, result, variables) {\n    var _this = this;\n    if (!fragment.typeCondition) return true;\n    if (!typename) return false;\n    var supertype = fragment.typeCondition.name.value;\n    if (typename === supertype) return true;\n    if (this.usingPossibleTypes && this.supertypeMap.has(supertype)) {\n      var typenameSupertypeSet = this.getSupertypeSet(typename, true);\n      var workQueue_1 = [typenameSupertypeSet];\n      var maybeEnqueue_1 = function maybeEnqueue_1(subtype) {\n        var supertypeSet = _this.getSupertypeSet(subtype, false);\n        if (supertypeSet && supertypeSet.size && workQueue_1.indexOf(supertypeSet) < 0) {\n          workQueue_1.push(supertypeSet);\n        }\n      };\n      var needToCheckFuzzySubtypes = !!(result && this.fuzzySubtypes.size);\n      var checkingFuzzySubtypes = false;\n      for (var i = 0; i < workQueue_1.length; ++i) {\n        var supertypeSet = workQueue_1[i];\n        if (supertypeSet.has(supertype)) {\n          if (!typenameSupertypeSet.has(supertype)) {\n            if (checkingFuzzySubtypes) {\n              process.env.NODE_ENV === \"production\" || invariant.warn(\"Inferring subtype \" + typename + \" of supertype \" + supertype);\n            }\n            typenameSupertypeSet.add(supertype);\n          }\n          return true;\n        }\n        supertypeSet.forEach(maybeEnqueue_1);\n        if (needToCheckFuzzySubtypes && i === workQueue_1.length - 1 && selectionSetMatchesResult(fragment.selectionSet, result, variables)) {\n          needToCheckFuzzySubtypes = false;\n          checkingFuzzySubtypes = true;\n          this.fuzzySubtypes.forEach(function (regExp, fuzzyString) {\n            var match = typename.match(regExp);\n            if (match && match[0] === typename) {\n              maybeEnqueue_1(fuzzyString);\n            }\n          });\n        }\n      }\n    }\n    return false;\n  };\n  Policies.prototype.hasKeyArgs = function (typename, fieldName) {\n    var policy = this.getFieldPolicy(typename, fieldName, false);\n    return !!(policy && policy.keyFn);\n  };\n  Policies.prototype.getStoreFieldName = function (fieldSpec) {\n    var typename = fieldSpec.typename,\n      fieldName = fieldSpec.fieldName;\n    var policy = this.getFieldPolicy(typename, fieldName, false);\n    var storeFieldName;\n    var keyFn = policy && policy.keyFn;\n    if (keyFn && typename) {\n      var context = {\n        typename: typename,\n        fieldName: fieldName,\n        field: fieldSpec.field || null,\n        variables: fieldSpec.variables\n      };\n      var args = argsFromFieldSpecifier(fieldSpec);\n      while (keyFn) {\n        var specifierOrString = keyFn(args, context);\n        if (Array.isArray(specifierOrString)) {\n          keyFn = keyArgsFnFromSpecifier(specifierOrString);\n        } else {\n          storeFieldName = specifierOrString || fieldName;\n          break;\n        }\n      }\n    }\n    if (storeFieldName === void 0) {\n      storeFieldName = fieldSpec.field ? storeKeyNameFromField(fieldSpec.field, fieldSpec.variables) : getStoreKeyName(fieldName, argsFromFieldSpecifier(fieldSpec));\n    }\n    if (storeFieldName === false) {\n      return fieldName;\n    }\n    return fieldName === fieldNameFromStoreName(storeFieldName) ? storeFieldName : fieldName + \":\" + storeFieldName;\n  };\n  Policies.prototype.readField = function (options, context) {\n    var objectOrReference = options.from;\n    if (!objectOrReference) return;\n    var nameOrField = options.field || options.fieldName;\n    if (!nameOrField) return;\n    if (options.typename === void 0) {\n      var typename = context.store.getFieldValue(objectOrReference, \"__typename\");\n      if (typename) options.typename = typename;\n    }\n    var storeFieldName = this.getStoreFieldName(options);\n    var fieldName = fieldNameFromStoreName(storeFieldName);\n    var existing = context.store.getFieldValue(objectOrReference, storeFieldName);\n    var policy = this.getFieldPolicy(options.typename, fieldName, false);\n    var read = policy && policy.read;\n    if (read) {\n      var readOptions = makeFieldFunctionOptions(this, objectOrReference, options, context, context.store.getStorage(isReference(objectOrReference) ? objectOrReference.__ref : objectOrReference, storeFieldName));\n      return cacheSlot.withValue(this.cache, read, [existing, readOptions]);\n    }\n    return existing;\n  };\n  Policies.prototype.getMergeFunction = function (parentTypename, fieldName, childTypename) {\n    var policy = this.getFieldPolicy(parentTypename, fieldName, false);\n    var merge = policy && policy.merge;\n    if (!merge && childTypename) {\n      policy = this.getTypePolicy(childTypename);\n      merge = policy && policy.merge;\n    }\n    return merge;\n  };\n  Policies.prototype.runMergeFunction = function (existing, incoming, _a, context, storage) {\n    var field = _a.field,\n      typename = _a.typename,\n      merge = _a.merge;\n    if (merge === mergeTrueFn) {\n      return makeMergeObjectsFunction(context.store.getFieldValue)(existing, incoming);\n    }\n    if (merge === mergeFalseFn) {\n      return incoming;\n    }\n    return merge(existing, incoming, makeFieldFunctionOptions(this, void 0, {\n      typename: typename,\n      fieldName: field.name.value,\n      field: field,\n      variables: context.variables\n    }, context, storage || Object.create(null)));\n  };\n  return Policies;\n}();\nexport { Policies };\nfunction makeFieldFunctionOptions(policies, objectOrReference, fieldSpec, context, storage) {\n  var storeFieldName = policies.getStoreFieldName(fieldSpec);\n  var fieldName = fieldNameFromStoreName(storeFieldName);\n  var variables = fieldSpec.variables || context.variables;\n  var _a = context.store,\n    getFieldValue = _a.getFieldValue,\n    toReference = _a.toReference,\n    canRead = _a.canRead;\n  return {\n    args: argsFromFieldSpecifier(fieldSpec),\n    field: fieldSpec.field || null,\n    fieldName: fieldName,\n    storeFieldName: storeFieldName,\n    variables: variables,\n    isReference: isReference,\n    toReference: toReference,\n    storage: storage,\n    cache: policies.cache,\n    canRead: canRead,\n    readField: function readField(fieldNameOrOptions, from) {\n      var options = typeof fieldNameOrOptions === \"string\" ? {\n        fieldName: fieldNameOrOptions,\n        from: from\n      } : __assign({}, fieldNameOrOptions);\n      if (void 0 === options.from) {\n        options.from = objectOrReference;\n      }\n      if (void 0 === options.variables) {\n        options.variables = variables;\n      }\n      return policies.readField(options, context);\n    },\n    mergeObjects: makeMergeObjectsFunction(getFieldValue)\n  };\n}\nfunction makeMergeObjectsFunction(getFieldValue) {\n  return function mergeObjects(existing, incoming) {\n    if (Array.isArray(existing) || Array.isArray(incoming)) {\n      throw process.env.NODE_ENV === \"production\" ? new InvariantError(2) : new InvariantError(\"Cannot automatically merge arrays\");\n    }\n    if (existing && typeof existing === \"object\" && incoming && typeof incoming === \"object\") {\n      var eType = getFieldValue(existing, \"__typename\");\n      var iType = getFieldValue(incoming, \"__typename\");\n      var typesDiffer = eType && iType && eType !== iType;\n      if (typesDiffer || !storeValueIsStoreObject(existing) || !storeValueIsStoreObject(incoming)) {\n        return incoming;\n      }\n      return __assign(__assign({}, existing), incoming);\n    }\n    return incoming;\n  };\n}\nfunction keyArgsFnFromSpecifier(specifier) {\n  return function (args, context) {\n    return args ? context.fieldName + \":\" + JSON.stringify(computeKeyObject(args, specifier, false)) : context.fieldName;\n  };\n}\nfunction keyFieldsFnFromSpecifier(specifier) {\n  var trie = new KeyTrie(canUseWeakMap);\n  return function (object, context) {\n    var aliasMap;\n    if (context.selectionSet && context.fragmentMap) {\n      var info = trie.lookupArray([context.selectionSet, context.fragmentMap]);\n      aliasMap = info.aliasMap || (info.aliasMap = makeAliasMap(context.selectionSet, context.fragmentMap));\n    }\n    var keyObject = context.keyObject = computeKeyObject(object, specifier, true, aliasMap);\n    return context.typename + \":\" + JSON.stringify(keyObject);\n  };\n}\nfunction makeAliasMap(selectionSet, fragmentMap) {\n  var map = Object.create(null);\n  var workQueue = new Set([selectionSet]);\n  workQueue.forEach(function (selectionSet) {\n    selectionSet.selections.forEach(function (selection) {\n      if (isField(selection)) {\n        if (selection.alias) {\n          var responseKey = selection.alias.value;\n          var storeKey = selection.name.value;\n          if (storeKey !== responseKey) {\n            var aliases = map.aliases || (map.aliases = Object.create(null));\n            aliases[storeKey] = responseKey;\n          }\n        }\n        if (selection.selectionSet) {\n          var subsets = map.subsets || (map.subsets = Object.create(null));\n          subsets[selection.name.value] = makeAliasMap(selection.selectionSet, fragmentMap);\n        }\n      } else {\n        var fragment = getFragmentFromSelection(selection, fragmentMap);\n        if (fragment) {\n          workQueue.add(fragment.selectionSet);\n        }\n      }\n    });\n  });\n  return map;\n}\nfunction computeKeyObject(response, specifier, strict, aliasMap) {\n  var keyObj = Object.create(null);\n  var prevKey;\n  specifier.forEach(function (s) {\n    if (Array.isArray(s)) {\n      if (typeof prevKey === \"string\") {\n        var subsets = aliasMap && aliasMap.subsets;\n        var subset = subsets && subsets[prevKey];\n        keyObj[prevKey] = computeKeyObject(response[prevKey], s, strict, subset);\n      }\n    } else {\n      var aliases = aliasMap && aliasMap.aliases;\n      var responseName = aliases && aliases[s] || s;\n      if (hasOwn.call(response, responseName)) {\n        keyObj[prevKey = s] = response[responseName];\n      } else {\n        process.env.NODE_ENV === \"production\" ? invariant(!strict, 3) : invariant(!strict, \"Missing field '\" + responseName + \"' while computing key fields\");\n        prevKey = void 0;\n      }\n    }\n  });\n  return keyObj;\n}","map":{"version":3,"sources":["../../../src/cache/inmemory/policies.ts"],"names":[],"mappings":";AAOA,SAAS,OAAO,QAAQ,UAAU;AAClC,SAAS,SAAS,EAAE,cAAc,QAAQ,cAAc;AAExD,SAEE,wBAAwB,EACxB,OAAO,EACP,qBAAqB,EACrB,qBAAqB,EAGrB,wBAAwB,EAExB,WAAW,EACX,eAAe,EACf,aAAa,EACb,OAAO,QACF,0BAAkB;AAEzB,SACE,MAAM,EACN,sBAAsB,EACtB,uBAAuB,EACvB,yBAAyB,EACzB,qBAAqB,QAChB,cAAY;AACnB,SAAS,SAAS,QAAQ,mBAAiB;AAmG3C,SAAS,sBAAsB,CAAC,IAAoB,EAAA;EAClD,OAAO,IAAI,CAAC,IAAI,KAAK,KAAK,CAAC,GAAG,IAAI,CAAC,IAAI,GACrC,IAAI,CAAC,KAAK,GAAG,wBAAwB,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,GAAG,IAAI;AAC5E;AAmFA,OAAO,IAAM,uBAAuB,GAAG,SAA1B,uBAAuB,CAClC,EAA8C,EAC9C,OAA0B,EAAA;MADxB,UAAU,GAAA,EAAA,CAAA,UAAA;IAAE,EAAE,GAAA,EAAA,CAAA,EAAA;IAAE,GAAG,GAAA,EAAA,CAAA,GAAA;EAGrB,IAAI,OAAO,UAAU,KAAK,QAAQ,EAAE;IAClC,IAAI,OAAO,EAAE;MACX,OAAO,CAAC,SAAS,GACd,EAAE,KAAK,KAAK,CAAC,GAAG;QAAG,EAAE,EAAA;MAAA,CAAE,GACxB,GAAG,KAAK,KAAK,CAAC,GAAG;QAAE,GAAG,EAAA;MAAA,CAAE,GACxB,KAAK,CAAC;IACT;IAED,IAAI,EAAE,KAAK,KAAK,CAAC,EAAE,EAAE,GAAG,GAAG;IAC3B,IAAI,EAAE,KAAK,KAAK,CAAC,EAAE;MACjB,OAAU,UAAU,GAAA,GAAA,IAClB,OAAO,EAAE,KAAK,QAAQ,IACtB,OAAO,EAAE,KAAK,QAAQ,GACpB,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,CAAE;IAC9B;EACF;AACH,CAAC;AAED,IAAM,eAAe,GAAsB,SAArC,eAAe,GAAsB;EAAM,OAAA,KAAK,CAAC;AAAN,CAAM;AACvD,IAAM,eAAe,GAAoB,SAAnC,eAAe,CAAqB,KAAK,EAAE,OAAO,EAAA;EAAK,OAAA,OAAO,CAAC,SAAS;AAAjB,CAAiB;AAI9E,IAAM,WAAW,GACf,SADI,WAAW,CACd,QAAQ,EAAE,QAAQ,EAAE,EAAgB,EAAA;MAAd,YAAY,GAAA,EAAA,CAAA,YAAA;EAAO,OAAA,YAAY,CAAC,QAAQ,EAAE,QAAQ,CAAC;AAAhC,CAAgC;AAC5E,IAAM,YAAY,GAA4B,SAAxC,YAAY,CAA6B,CAAC,EAAE,QAAQ,EAAA;EAAK,OAAA,QAAQ;AAAR,CAAQ;AAMvE,IAAA,QAAA,GAAA,YAAA;EAsCE,SAAA,QAAA,CAAoB,MAKnB,EAAA;IALmB,IAAA,CAAA,MAAM,GAAN,MAAM;IArClB,IAAA,CAAA,YAAY,GAYhB,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC;IAEf,IAAA,CAAA,SAAS,GAEb,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC;IAMf,IAAA,CAAA,YAAY,GAAG,IAAI,GAAG,EAAuB;IAM7C,IAAA,CAAA,aAAa,GAAG,IAAI,GAAG,EAAkB;IAIjC,IAAA,CAAA,iBAAiB,GAA2B,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC;IAC/D,IAAA,CAAA,iBAAiB,GAA2B,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC;IAE/D,IAAA,CAAA,kBAAkB,GAAG,KAAK;IAQxC,IAAI,CAAC,MAAM,GAAA,QAAA,CAAA;MACT,gBAAgB,EAAE;IAAuB,CAAA,EACtC,MAAM,CACV;IAED,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK;IAE9B,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC;IAC7B,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC;IAChC,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC;IAEpC,IAAI,MAAM,CAAC,aAAa,EAAE;MACxB,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,aAAa,CAAC;IAC5C;IAED,IAAI,MAAM,CAAC,YAAY,EAAE;MACvB,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,YAAY,CAAC;IAC1C;EACH;EAEO,QAAA,CAAA,SAAA,CAAA,QAAQ,GAAf,UACE,MAAmB,EACnB,YAA+B,EAC/B,WAAyB,EAAA;IAGzB,IAAM,QAAQ,GAAG,YAAY,IAAI,WAAW,GACxC,qBAAqB,CAAC,MAAM,EAAE,YAAY,EAAE,WAAW,CAAC,GACxD,MAAM,CAAC,UAAU;IAQrB,IAAI,QAAQ,KAAK,IAAI,CAAC,iBAAiB,CAAC,UAAU,EAAE;MAClD,OAAO,CAAC,YAAY,CAAC;IACtB;IAED,IAAM,OAAO,GAAqB;MAChC,QAAQ,EAAA,QAAA;MACR,YAAY,EAAA,YAAA;MACZ,WAAW,EAAA;KACZ;IAED,IAAI,EAAmB;IAEvB,IAAM,MAAM,GAAG,QAAQ,IAAI,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC;IACvD,IAAI,KAAK,GAAG,MAAM,IAAI,MAAM,CAAC,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,gBAAgB;IAClE,OAAO,KAAK,EAAE;MACZ,IAAM,aAAa,GAAG,KAAK,CAAC,MAAM,EAAE,OAAO,CAAC;MAC5C,IAAI,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE;QAChC,KAAK,GAAG,wBAAwB,CAAC,aAAa,CAAC;OAChD,MAAM;QACL,EAAE,GAAG,aAAa;QAClB;MACD;IACF;IAED,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC;IAC7B,OAAO,OAAO,CAAC,SAAS,GAAG,CAAC,EAAE,EAAE,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,CAAC;EAC3D,CAAC;EAEM,QAAA,CAAA,SAAA,CAAA,eAAe,GAAtB,UAAuB,YAA0B,EAAA;IAAjD,IAAA,KAAA,GAAA,IAAA;IACE,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,UAAA,QAAQ,EAAA;MACxC,IAAM,EAAA,GAKF,YAAY,CAAC,QAAQ,CAAC;QAJxB,SAAS,GAAA,EAAA,CAAA,SAAA;QACT,YAAY,GAAA,EAAA,CAAA,YAAA;QACZ,gBAAgB,GAAA,EAAA,CAAA,gBAAA;QACb,QAAQ,GAAA,MAAA,CAAA,EAAA,EAJP,CAAA,WAAA,EAAA,cAAA,EAAA,kBAAA,CAKL,CAAyB;MAgB1B,IAAI,SAAS,EAAE,KAAI,CAAC,eAAe,CAAC,OAAO,EAAE,QAAQ,CAAC;MACtD,IAAI,YAAY,EAAE,KAAI,CAAC,eAAe,CAAC,UAAU,EAAE,QAAQ,CAAC;MAC5D,IAAI,gBAAgB,EAAE,KAAI,CAAC,eAAe,CAAC,cAAc,EAAE,QAAQ,CAAC;MAEpE,IAAI,MAAM,CAAC,IAAI,CAAC,KAAI,CAAC,SAAS,EAAE,QAAQ,CAAC,EAAE;QACzC,KAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC;OACxC,MAAM;QACL,KAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC;MACtC;IACH,CAAC,CAAC;EACJ,CAAC;EAEO,QAAA,CAAA,SAAA,CAAA,gBAAgB,GAAxB,UAAyB,QAAgB,EAAE,QAAoB,EAAA;IAA/D,IAAA,KAAA,GAAA,IAAA;IACE,IAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC;IACrC,IAAA,SAAS,GAAa,QAAQ,CAAA,SAArB;MAAE,MAAM,GAAK,QAAQ,CAAA,MAAb;IAEzB,SAAS,QAAQ,CACf,QAAmD,EACnD,KAAoC,EAAA;MAEpC,QAAQ,CAAC,KAAK,GACZ,OAAO,KAAK,KAAK,UAAU,GAAG,KAAK,GAGnC,KAAK,KAAK,IAAI,GAAG,WAAW,GAG5B,KAAK,KAAK,KAAK,GAAG,YAAY,GAC9B,QAAQ,CAAC,KAAK;IAClB;IAIA,QAAQ,CAAC,QAAQ,EAAE,QAAQ,CAAC,KAAK,CAAC;IAElC,QAAQ,CAAC,KAAK,GAEZ,SAAS,KAAK,KAAK,GAAG,eAAe,GAGrC,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,wBAAwB,CAAC,SAAS,CAAC,GAE9D,OAAO,SAAS,KAAK,UAAU,GAAG,SAAS,GAE3C,QAAQ,CAAC,KAAK;IAEhB,IAAI,MAAM,EAAE;MACV,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,UAAA,SAAS,EAAA;QACnC,IAAM,QAAQ,GAAG,KAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,SAAS,EAAE,IAAI,CAAE;QAChE,IAAM,QAAQ,GAAG,MAAM,CAAC,SAAS,CAAC;QAElC,IAAI,OAAO,QAAQ,KAAK,UAAU,EAAE;UAClC,QAAQ,CAAC,IAAI,GAAG,QAAQ;SACzB,MAAM;UACG,IAAA,OAAO,GAAkB,QAAQ,CAAA,OAA1B;YAAE,IAAI,GAAY,QAAQ,CAAA,IAApB;YAAE,KAAK,GAAK,QAAQ,CAAA,KAAb;UAE5B,QAAQ,CAAC,KAAK,GAGZ,OAAO,KAAK,KAAK,GAAG,eAAe,GAGnC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,sBAAsB,CAAC,OAAO,CAAC,GAExD,OAAO,OAAO,KAAK,UAAU,GAAG,OAAO,GAEvC,QAAQ,CAAC,KAAK;UAEhB,IAAI,OAAO,IAAI,KAAK,UAAU,EAAE;YAC9B,QAAQ,CAAC,IAAI,GAAG,IAAI;UACrB;UAED,QAAQ,CAAC,QAAQ,EAAE,KAAK,CAAC;QAC1B;QAED,IAAI,QAAQ,CAAC,IAAI,IAAI,QAAQ,CAAC,KAAK,EAAE;UAMnC,QAAQ,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,IAAI,eAAe;QACnD;MACH,CAAC,CAAC;IACH;EACH,CAAC;EAEO,QAAA,CAAA,SAAA,CAAA,eAAe,GAAvB,UACE,KAA4C,EAC5C,QAAwB,EAAA;IAAxB,IAAA,QAAA,KAAA,KAAA,CAAA,EAAA;MAAA,QAAA,GAAA,KAAwB;IAAA;IAExB,IAAM,MAAM,GAAG,OAAO,GAAG,KAAK,CAAC,WAAW,EAAE;IAC5C,IAAM,GAAG,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC;IAC1C,IAAI,QAAQ,KAAK,GAAG,EAAE;MACpB,OAAA,CAAA,GAAW,CAAA,QAAO,KAAG,YAAY,GAAA,SAAA,CAAA,CAAA,GAAA,IAAsB,GAAA,KAAK,KAAA,EAAA,CAAA,CAAA,GAAA,SAAA,CAAA,CAAA,GAAA,IAA8B,GAAA,KAAA,KAAA,EAAA,qBAAA,GAAA,KAAA,GAAA,4BAAA,CAAA;MAG1F,IAAI,GAAG,EAAE,OAAO,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC;MAE3C,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,GAAG,MAAM;MAEzC,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,GAAG,QAAQ;IAC1C;EACH,CAAC;EAEM,QAAA,CAAA,SAAA,CAAA,gBAAgB,GAAvB,UAAwB,aAA+B,EAAA;IAAvD,IAAA,KAAA,GAAA,IAAA;IACG,IAAI,CAAC,kBAA8B,GAAG,IAAI;IAC3C,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,UAAA,SAAS,EAAA;MAI1C,KAAI,CAAC,eAAe,CAAC,SAAS,EAAE,IAAI,CAAC;MAErC,aAAa,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,UAAA,OAAO,EAAA;QACtC,KAAI,CAAC,eAAe,CAAC,OAAO,EAAE,IAAI,CAAE,CAAC,GAAG,CAAC,SAAS,CAAC;QACnD,IAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,qBAAqB,CAAC;QAClD,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,OAAO,EAAE;UAElC,KAAI,CAAC,aAAa,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,MAAM,CAAC,OAAO,CAAC,CAAC;QACrD;MACH,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC;EAEO,QAAA,CAAA,SAAA,CAAA,aAAa,GAArB,UAAsB,QAAgB,EAAA;IAAtC,IAAA,KAAA,GAAA,IAAA;IACE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,QAAQ,CAAC,EAAE;MAC7C,IAAM,QAAM,GACV,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC;MACnD,QAAM,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC;MAuBnC,IAAM,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,QAAQ,CAAC;MAClD,IAAI,UAAU,IAAI,UAAU,CAAC,IAAI,EAAE;QACjC,UAAU,CAAC,OAAO,CAAC,UAAA,SAAS,EAAA;UAC1B,IAAM,EAAA,GAAsB,KAAI,CAAC,aAAa,CAAC,SAAS,CAAC;YAAjD,MAAM,GAAA,EAAA,CAAA,MAAA;YAAK,IAAI,GAAA,MAAA,CAAA,EAAA,EAAjB,CAAA,QAAA,CAAmB,CAAgC;UACzD,MAAM,CAAC,MAAM,CAAC,QAAM,EAAE,IAAI,CAAC;UAC3B,MAAM,CAAC,MAAM,CAAC,QAAM,CAAC,MAAM,EAAE,MAAM,CAAC;QACtC,CAAC,CAAC;MACH;IACF;IAED,IAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC;IACtC,IAAI,KAAK,IAAI,KAAK,CAAC,MAAM,EAAE;MACzB,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,OAAO,CAAA,KAAA,CAAA,KAAA,CAAA,EAAI,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA,CAAE;IAC7D;IAED,OAAO,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC;EACpC,CAAC;EAEO,QAAA,CAAA,SAAA,CAAA,cAAc,GAAtB,UACE,QAA4B,EAC5B,SAAiB,EACjB,eAAwB,EAAA;IAMxB,IAAI,QAAQ,EAAE;MACZ,IAAM,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,MAAM;MACzD,OAAO,aAAa,CAAC,SAAS,CAAC,IAC7B,eAAe,KAAK,aAAa,CAAC,SAAS,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAE;IACvE;EACH,CAAC;EAEO,QAAA,CAAA,SAAA,CAAA,eAAe,GAAvB,UACE,OAAe,EACf,eAAwB,EAAA;IAExB,IAAI,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC;IACjD,IAAI,CAAC,YAAY,IAAI,eAAe,EAAE;MACpC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,OAAO,EAAE,YAAY,GAAG,IAAI,GAAG,EAAU,CAAC;IACjE;IACD,OAAO,YAAY;EACrB,CAAC;EAEM,QAAA,CAAA,SAAA,CAAA,eAAe,GAAtB,UACE,QAAqD,EACrD,QAA4B,EAC5B,MAA4B,EAC5B,SAA+B,EAAA;IAJjC,IAAA,KAAA,GAAA,IAAA;IAME,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,OAAO,IAAI;IAIxC,IAAI,CAAC,QAAQ,EAAE,OAAO,KAAK;IAE3B,IAAM,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK;IAEnD,IAAI,QAAQ,KAAK,SAAS,EAAE,OAAO,IAAI;IAEvC,IAAI,IAAI,CAAC,kBAAkB,IACvB,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE;MACpC,IAAM,oBAAoB,GAAG,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,IAAI,CAAE;MAClE,IAAM,WAAS,GAAG,CAAC,oBAAoB,CAAC;MACxC,IAAM,cAAY,GAAG,SAAf,cAAY,CAAI,OAAe,EAAA;QACnC,IAAM,YAAY,GAAG,KAAI,CAAC,eAAe,CAAC,OAAO,EAAE,KAAK,CAAC;QACzD,IAAI,YAAY,IACZ,YAAY,CAAC,IAAI,IACjB,WAAS,CAAC,OAAO,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE;UACvC,WAAS,CAAC,IAAI,CAAC,YAAY,CAAC;QAC7B;MACH,CAAC;MAQD,IAAI,wBAAwB,GAAG,CAAC,EAAE,MAAM,IAAI,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC;MACpE,IAAI,qBAAqB,GAAG,KAAK;MAIjC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAS,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;QACzC,IAAM,YAAY,GAAG,WAAS,CAAC,CAAC,CAAC;QAEjC,IAAI,YAAY,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE;UAC/B,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE;YACxC,IAAI,qBAAqB,EAAE;cACzB,OAAA,CAAA,GAAU,CAAA,QAAK,KAAA,YAAA,IAAqB,SAAQ,CAAA,IAAA,CAAA,oBAAiB,GAAa,QAAA,GAAA,gBAAA,GAAA,SAAA,CAAA;YAC3E;YAKD,oBAAoB,CAAC,GAAG,CAAC,SAAS,CAAC;UACpC;UACD,OAAO,IAAI;QACZ;QAED,YAAY,CAAC,OAAO,CAAC,cAAY,CAAC;QAElC,IAAI,wBAAwB,IAGxB,CAAC,KAAK,WAAS,CAAC,MAAM,GAAG,CAAC,IAK1B,yBAAyB,CAAC,QAAQ,CAAC,YAAY,EAAE,MAAO,EAAE,SAAS,CAAC,EAAE;UAIxE,wBAAwB,GAAG,KAAK;UAChC,qBAAqB,GAAG,IAAI;UAM5B,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,UAAC,MAAM,EAAE,WAAW,EAAA;YAC7C,IAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC;YACpC,IAAI,KAAK,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;cAClC,cAAY,CAAC,WAAW,CAAC;YAC1B;UACH,CAAC,CAAC;QACH;MACF;IACF;IAED,OAAO,KAAK;EACd,CAAC;EAEM,QAAA,CAAA,SAAA,CAAA,UAAU,GAAjB,UAAkB,QAA4B,EAAE,SAAiB,EAAA;IAC/D,IAAM,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,SAAS,EAAE,KAAK,CAAC;IAC9D,OAAO,CAAC,EAAE,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC;EACnC,CAAC;EAEM,QAAA,CAAA,SAAA,CAAA,iBAAiB,GAAxB,UAAyB,SAAyB,EAAA;IACxC,IAAA,QAAQ,GAAgB,SAAS,CAAA,QAAzB;MAAE,SAAS,GAAK,SAAS,CAAA,SAAd;IAC3B,IAAM,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,SAAS,EAAE,KAAK,CAAC;IAC9D,IAAI,cAA6B;IAEjC,IAAI,KAAK,GAAG,MAAM,IAAI,MAAM,CAAC,KAAK;IAClC,IAAI,KAAK,IAAI,QAAQ,EAAE;MACrB,IAAM,OAAO,GAAmC;QAC9C,QAAQ,EAAA,QAAA;QACR,SAAS,EAAA,SAAA;QACT,KAAK,EAAE,SAAS,CAAC,KAAK,IAAI,IAAI;QAC9B,SAAS,EAAE,SAAS,CAAC;OACtB;MACD,IAAM,IAAI,GAAG,sBAAsB,CAAC,SAAS,CAAC;MAC9C,OAAO,KAAK,EAAE;QACZ,IAAM,iBAAiB,GAAG,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC;QAC9C,IAAI,KAAK,CAAC,OAAO,CAAC,iBAAiB,CAAC,EAAE;UACpC,KAAK,GAAG,sBAAsB,CAAC,iBAAiB,CAAC;SAClD,MAAM;UAGL,cAAc,GAAG,iBAAiB,IAAI,SAAS;UAC/C;QACD;MACF;IACF;IAED,IAAI,cAAc,KAAK,KAAK,CAAC,EAAE;MAC7B,cAAc,GAAG,SAAS,CAAC,KAAK,GAC5B,qBAAqB,CAAC,SAAS,CAAC,KAAK,EAAE,SAAS,CAAC,SAAS,CAAC,GAC3D,eAAe,CAAC,SAAS,EAAE,sBAAsB,CAAC,SAAS,CAAC,CAAC;IAClE;IAID,IAAI,cAAc,KAAK,KAAK,EAAE;MAC5B,OAAO,SAAS;IACjB;IAKD,OAAO,SAAS,KAAK,sBAAsB,CAAC,cAAc,CAAC,GACvD,cAAc,GACd,SAAS,GAAG,GAAG,GAAG,cAAc;EACtC,CAAC;EAEM,QAAA,CAAA,SAAA,CAAA,SAAS,GAAhB,UACE,OAAyB,EACzB,OAA+B,EAAA;IAE/B,IAAM,iBAAiB,GAAG,OAAO,CAAC,IAAI;IACtC,IAAI,CAAC,iBAAiB,EAAE;IAExB,IAAM,WAAW,GAAG,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,SAAS;IACtD,IAAI,CAAC,WAAW,EAAE;IAElB,IAAI,OAAO,CAAC,QAAQ,KAAK,KAAK,CAAC,EAAE;MAC/B,IAAM,QAAQ,GAAG,OAAO,CAAC,KAAK,CAAC,aAAa,CAAS,iBAAiB,EAAE,YAAY,CAAC;MACrF,IAAI,QAAQ,EAAE,OAAO,CAAC,QAAQ,GAAG,QAAQ;IAC1C;IAED,IAAM,cAAc,GAAG,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC;IACtD,IAAM,SAAS,GAAG,sBAAsB,CAAC,cAAc,CAAC;IACxD,IAAM,QAAQ,GAAG,OAAO,CAAC,KAAK,CAAC,aAAa,CAAI,iBAAiB,EAAE,cAAc,CAAC;IAClF,IAAM,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,QAAQ,EAAE,SAAS,EAAE,KAAK,CAAC;IACtE,IAAM,IAAI,GAAG,MAAM,IAAI,MAAM,CAAC,IAAI;IAElC,IAAI,IAAI,EAAE;MACR,IAAM,WAAW,GAAG,wBAAwB,CAC1C,IAAI,EACJ,iBAAiB,EACjB,OAAO,EACP,OAAO,EACP,OAAO,CAAC,KAAK,CAAC,UAAU,CACtB,WAAW,CAAC,iBAAiB,CAAC,GAC1B,iBAAiB,CAAC,KAAK,GACvB,iBAAiB,EACrB,cAAc,CACf,CACF;MAGD,OAAO,SAAS,CAAC,SAAS,CACxB,IAAI,CAAC,KAAK,EACV,IAAI,EACJ,CAAC,QAAQ,EAAE,WAAW,CAAC,CACL;IACrB;IAED,OAAO,QAAQ;EACjB,CAAC;EAEM,QAAA,CAAA,SAAA,CAAA,gBAAgB,GAAvB,UACE,cAAkC,EAClC,SAAiB,EACjB,aAAiC,EAAA;IAEjC,IAAI,MAAM,GAIR,IAAI,CAAC,cAAc,CAAC,cAAc,EAAE,SAAS,EAAE,KAAK,CAAC;IACvD,IAAI,KAAK,GAAG,MAAM,IAAI,MAAM,CAAC,KAAK;IAClC,IAAI,CAAC,KAAK,IAAI,aAAa,EAAE;MAC3B,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC;MAC1C,KAAK,GAAG,MAAM,IAAI,MAAM,CAAC,KAAK;IAC/B;IACD,OAAO,KAAK;EACd,CAAC;EAEM,QAAA,CAAA,SAAA,CAAA,gBAAgB,GAAvB,UACE,QAAoB,EACpB,QAAoB,EACpB,EAAqC,EACrC,OAA+B,EAC/B,OAAqB,EAAA;QAFnB,KAAK,GAAA,EAAA,CAAA,KAAA;MAAE,QAAQ,GAAA,EAAA,CAAA,QAAA;MAAE,KAAK,GAAA,EAAA,CAAA,KAAA;IAIxB,IAAI,KAAK,KAAK,WAAW,EAAE;MAIzB,OAAO,wBAAwB,CAC7B,OAAO,CAAC,KAAK,CAAC,aAAa,CAC5B,CAAC,QAAuB,EACvB,QAAuB,CAAC;IAC3B;IAED,IAAI,KAAK,KAAK,YAAY,EAAE;MAE1B,OAAO,QAAQ;IAChB;IAED,OAAO,KAAK,CAAC,QAAQ,EAAE,QAAQ,EAAE,wBAAwB,CACvD,IAAI,EAYJ,KAAK,CAAC,EACN;MAAE,QAAQ,EAAA,QAAA;MACR,SAAS,EAAE,KAAK,CAAC,IAAI,CAAC,KAAK;MAC3B,KAAK,EAAA,KAAA;MACL,SAAS,EAAE,OAAO,CAAC;IAAS,CAAE,EAChC,OAAO,EACP,OAAO,IAAI,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAC/B,CAAC;EACJ,CAAC;EACH,OAAA,QAAC;AAAD,CAAC,EAAA;;AAED,SAAS,wBAAwB,CAC/B,QAAkB,EAClB,iBAAsD,EACtD,SAAyB,EACzB,OAA+B,EAC/B,OAAoB,EAAA;EAEpB,IAAM,cAAc,GAAG,QAAQ,CAAC,iBAAiB,CAAC,SAAS,CAAC;EAC5D,IAAM,SAAS,GAAG,sBAAsB,CAAC,cAAc,CAAC;EACxD,IAAM,SAAS,GAAG,SAAS,CAAC,SAAS,IAAI,OAAO,CAAC,SAAS;EACpD,IAAA,EAAA,GAA0C,OAAO,CAAC,KAAK;IAArD,aAAa,GAAA,EAAA,CAAA,aAAA;IAAE,WAAW,GAAA,EAAA,CAAA,WAAA;IAAE,OAAO,GAAA,EAAA,CAAA,OAAkB;EAE7D,OAAO;IACL,IAAI,EAAE,sBAAsB,CAAC,SAAS,CAAC;IACvC,KAAK,EAAE,SAAS,CAAC,KAAK,IAAI,IAAI;IAC9B,SAAS,EAAA,SAAA;IACT,cAAc,EAAA,cAAA;IACd,SAAS,EAAA,SAAA;IACT,WAAW,EAAA,WAAA;IACX,WAAW,EAAA,WAAA;IACX,OAAO,EAAA,OAAA;IACP,KAAK,EAAE,QAAQ,CAAC,KAAK;IACrB,OAAO,EAAA,OAAA;IAEP,SAAS,EAAT,mBACE,kBAA6C,EAC7C,IAA8B,EAAA;MAE9B,IAAM,OAAO,GACX,OAAO,kBAAkB,KAAK,QAAQ,GAAG;QACvC,SAAS,EAAE,kBAAkB;QAC7B,IAAI,EAAA;OACL,GAAE,QAAA,CAAA,CAAA,CAAA,EAAM,kBAAkB,CAAE;MAE/B,IAAI,KAAK,CAAC,KAAK,OAAO,CAAC,IAAI,EAAE;QAC3B,OAAO,CAAC,IAAI,GAAG,iBAAiB;MACjC;MAED,IAAI,KAAK,CAAC,KAAK,OAAO,CAAC,SAAS,EAAE;QAChC,OAAO,CAAC,SAAS,GAAG,SAAS;MAC9B;MAED,OAAO,QAAQ,CAAC,SAAS,CAAI,OAAO,EAAE,OAAO,CAAC;IAChD,CAAC;IAED,YAAY,EAAE,wBAAwB,CAAC,aAAa;GACrD;AACH;AAEA,SAAS,wBAAwB,CAC/B,aAA+B,EAAA;EAE/B,OAAO,SAAS,YAAY,CAAC,QAAQ,EAAE,QAAQ,EAAA;IAC7C,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;MACtD,MAAM,OAAI,CAAA,GAAA,CAAA,QAAe,KAAA,YAAA,GAAA,IAAA,cAAqC,CAAA,CAAA,CAAA,GAAA,IAAA,cAAA,CAAA,mCAAA,CAAA;IAC/D;IAMD,IAAI,QAAQ,IAAI,OAAO,QAAQ,KAAK,QAAQ,IACxC,QAAQ,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;MAC5C,IAAM,KAAK,GAAG,aAAa,CAAC,QAAQ,EAAE,YAAY,CAAC;MACnD,IAAM,KAAK,GAAG,aAAa,CAAC,QAAQ,EAAE,YAAY,CAAC;MACnD,IAAM,WAAW,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,KAAK,KAAK;MAErD,IAAI,WAAW,IACX,CAAC,uBAAuB,CAAC,QAAQ,CAAC,IAClC,CAAC,uBAAuB,CAAC,QAAQ,CAAC,EAAE;QACtC,OAAO,QAAQ;MAChB;MAED,OAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EAAY,QAAQ,CAAA,EAAK,QAAQ,CAAA;IAClC;IAED,OAAO,QAAQ;EACjB,CAAC;AACH;AAEA,SAAS,sBAAsB,CAC7B,SAAuB,EAAA;EAEvB,OAAO,UAAC,IAAI,EAAE,OAAO,EAAA;IACnB,OAAO,IAAI,GAAM,OAAO,CAAC,SAAS,GAAA,GAAA,GAChC,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,IAAI,EAAE,SAAS,EAAE,KAAK,CAAC,CACvD,GAAG,OAAO,CAAC,SAAS;EACxB,CAAC;AACH;AAEA,SAAS,wBAAwB,CAC/B,SAAuB,EAAA;EAEvB,IAAM,IAAI,GAAG,IAAI,OAAO,CAErB,aAAa,CAAC;EAEjB,OAAO,UAAC,MAAM,EAAE,OAAO,EAAA;IACrB,IAAI,QAA8B;IAClC,IAAI,OAAO,CAAC,YAAY,IAAI,OAAO,CAAC,WAAW,EAAE;MAC/C,IAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,CAC5B,OAAO,CAAC,YAAY,EACpB,OAAO,CAAC,WAAW,CACpB,CAAC;MACF,QAAQ,GAAG,IAAI,CAAC,QAAQ,KACtB,IAAI,CAAC,QAAQ,GAAG,YAAY,CAAC,OAAO,CAAC,YAAY,EAAE,OAAO,CAAC,WAAW,CAAC,CACxE;IACF;IAED,IAAM,SAAS,GAAG,OAAO,CAAC,SAAS,GACjC,gBAAgB,CAAC,MAAM,EAAE,SAAS,EAAE,IAAI,EAAE,QAAQ,CAAC;IAErD,OAAU,OAAO,CAAC,QAAQ,GAAA,GAAA,GAAI,IAAI,CAAC,SAAS,CAAC,SAAS,CAAG;EAC3D,CAAC;AACH;AAWA,SAAS,YAAY,CACnB,YAA8B,EAC9B,WAAwB,EAAA;EAExB,IAAI,GAAG,GAAa,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC;EAEvC,IAAM,SAAS,GAAG,IAAI,GAAG,CAAC,CAAC,YAAY,CAAC,CAAC;EACzC,SAAS,CAAC,OAAO,CAAC,UAAA,YAAY,EAAA;IAC5B,YAAY,CAAC,UAAU,CAAC,OAAO,CAAC,UAAA,SAAS,EAAA;MACvC,IAAI,OAAO,CAAC,SAAS,CAAC,EAAE;QACtB,IAAI,SAAS,CAAC,KAAK,EAAE;UACnB,IAAM,WAAW,GAAG,SAAS,CAAC,KAAK,CAAC,KAAK;UACzC,IAAM,QAAQ,GAAG,SAAS,CAAC,IAAI,CAAC,KAAK;UACrC,IAAI,QAAQ,KAAK,WAAW,EAAE;YAC5B,IAAM,OAAO,GAAG,GAAG,CAAC,OAAO,KAAK,GAAG,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YAClE,OAAO,CAAC,QAAQ,CAAC,GAAG,WAAW;UAChC;QACF;QACD,IAAI,SAAS,CAAC,YAAY,EAAE;UAC1B,IAAM,OAAO,GAAG,GAAG,CAAC,OAAO,KAAK,GAAG,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;UAClE,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,GAC3B,YAAY,CAAC,SAAS,CAAC,YAAY,EAAE,WAAW,CAAC;QACpD;OACF,MAAM;QACL,IAAM,QAAQ,GAAG,wBAAwB,CAAC,SAAS,EAAE,WAAW,CAAC;QACjE,IAAI,QAAQ,EAAE;UACZ,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,YAAY,CAAC;QACrC;MACF;IACH,CAAC,CAAC;EACJ,CAAC,CAAC;EACF,OAAO,GAAG;AACZ;AAEA,SAAS,gBAAgB,CACvB,QAA6B,EAC7B,SAAuB,EACvB,MAAe,EACf,QAAmB,EAAA;EAKnB,IAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC;EAClC,IAAI,OAA2B;EAC/B,SAAS,CAAC,OAAO,CAAC,UAAA,CAAC,EAAA;IACjB,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;MACpB,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;QAC/B,IAAM,OAAO,GAAG,QAAQ,IAAI,QAAQ,CAAC,OAAO;QAC5C,IAAM,MAAM,GAAG,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC;QAC1C,MAAM,CAAC,OAAO,CAAC,GAAG,gBAAgB,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE,MAAM,EAAE,MAAM,CAAC;MACzE;KACF,MAAM;MACL,IAAM,OAAO,GAAG,QAAQ,IAAI,QAAQ,CAAC,OAAO;MAC5C,IAAM,YAAY,GAAG,OAAO,IAAI,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC;MAC/C,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,YAAY,CAAC,EAAE;QACvC,MAAM,CAAC,OAAO,GAAG,CAAC,CAAC,GAAG,QAAQ,CAAC,YAAY,CAAC;OAC7C,MAAM;QACL,OAAA,CAAA,GAAW,CAAA,QAAQ,KAAA,YAAA,GAAkB,SAAA,CAAA,CAAY,MAAA,EAAA,CAAA,CAAA,GAAA,SAAA,CAAA,CAAA,MAAA,EAAA,iBAAgC,GAAA,YAAA,GAAA,8BAAA,CAAA;QACjF,OAAO,GAAG,KAAK,CAAC;MACjB;IACF;EACH,CAAC,CAAC;EACF,OAAO,MAAM;AACf","sourcesContent":["import {\n  InlineFragmentNode,\n  FragmentDefinitionNode,\n  SelectionSetNode,\n  FieldNode,\n} from 'graphql';\n\nimport { KeyTrie } from 'optimism';\nimport { invariant, InvariantError } from 'ts-invariant';\n\nimport {\n  FragmentMap,\n  getFragmentFromSelection,\n  isField,\n  getTypenameFromResult,\n  storeKeyNameFromField,\n  StoreValue,\n  StoreObject,\n  argumentsObjectFromField,\n  Reference,\n  isReference,\n  getStoreKeyName,\n  canUseWeakMap,\n  compact,\n} from '../../utilities';\nimport { IdGetter, ReadMergeModifyContext, MergeInfo } from \"./types\";\nimport {\n  hasOwn,\n  fieldNameFromStoreName,\n  storeValueIsStoreObject,\n  selectionSetMatchesResult,\n  TypeOrFieldNameRegExp,\n} from './helpers';\nimport { cacheSlot } from './reactiveVars';\nimport { InMemoryCache } from './inMemoryCache';\nimport {\n  SafeReadonly,\n  FieldSpecifier,\n  ToReferenceFunction,\n  ReadFieldFunction,\n  ReadFieldOptions,\n  CanReadFunction,\n} from '../core/types/common';\nimport { FieldValueGetter } from './entityStore';\n\nexport type TypePolicies = {\n  [__typename: string]: TypePolicy;\n}\n\n// TypeScript 3.7 will allow recursive type aliases, so this should work:\n// type KeySpecifier = (string | KeySpecifier)[]\ntype KeySpecifier = (string | any[])[];\n\ntype KeyFieldsContext = {\n  typename?: string;\n  selectionSet?: SelectionSetNode;\n  fragmentMap?: FragmentMap;\n  // May be set by the KeyFieldsFunction to report fields that were involved\n  // in computing the ID. Never passed in by the caller.\n  keyObject?: Record<string, any>;\n};\n\nexport type KeyFieldsFunction = (\n  object: Readonly<StoreObject>,\n  context: KeyFieldsContext,\n) => KeySpecifier | false | ReturnType<IdGetter>;\n\ntype KeyFieldsResult = Exclude<ReturnType<KeyFieldsFunction>, KeySpecifier>;\n\n// TODO Should TypePolicy be a generic type, with a TObject or TEntity\n// type parameter?\nexport type TypePolicy = {\n  // Allows defining the primary key fields for this type, either using an\n  // array of field names or a function that returns an arbitrary string.\n  keyFields?: KeySpecifier | KeyFieldsFunction | false;\n\n  // Allows defining a merge function (or merge:true/false shorthand) to\n  // be used for merging objects of this type wherever they appear, unless\n  // the parent field also defines a merge function/boolean (that is,\n  // parent field merge functions take precedence over type policy merge\n  // functions). In many cases, defining merge:true for a given type\n  // policy can save you from specifying merge:true for all the field\n  // policies where that type might be encountered.\n  merge?: FieldMergeFunction | boolean;\n\n  // In the rare event that your schema happens to use a different\n  // __typename for the root Query, Mutation, and/or Schema types, you can\n  // express your deviant preferences by enabling one of these options.\n  queryType?: true,\n  mutationType?: true,\n  subscriptionType?: true,\n\n  fields?: {\n    [fieldName: string]:\n      | FieldPolicy<any>\n      | FieldReadFunction<any>;\n  }\n};\n\nexport type KeyArgsFunction = (\n  args: Record<string, any> | null,\n  context: {\n    typename: string;\n    fieldName: string;\n    field: FieldNode | null;\n    variables?: Record<string, any>;\n  },\n) => KeySpecifier | false | ReturnType<IdGetter>;\n\ntype KeyArgsResult = Exclude<ReturnType<KeyArgsFunction>, KeySpecifier>;\n\nexport type FieldPolicy<\n  // The internal representation used to store the field's data in the\n  // cache. Must be JSON-serializable if you plan to serialize the result\n  // of cache.extract() using JSON.\n  TExisting = any,\n  // The type of the incoming parameter passed to the merge function,\n  // typically matching the GraphQL response format, but with Reference\n  // objects substituted for any identifiable child objects. Often the\n  // same as TExisting, but not necessarily.\n  TIncoming = TExisting,\n  // The type that the read function actually returns, using TExisting\n  // data and options.args as input. Usually the same as TIncoming.\n  TReadResult = TIncoming,\n> = {\n  keyArgs?: KeySpecifier | KeyArgsFunction | false;\n  read?: FieldReadFunction<TExisting, TReadResult>;\n  merge?: FieldMergeFunction<TExisting, TIncoming> | boolean;\n};\n\nexport type StorageType = Record<string, any>;\n\nfunction argsFromFieldSpecifier(spec: FieldSpecifier) {\n  return spec.args !== void 0 ? spec.args :\n    spec.field ? argumentsObjectFromField(spec.field, spec.variables) : null;\n}\n\nexport interface FieldFunctionOptions<\n  TArgs = Record<string, any>,\n  TVars = Record<string, any>,\n> {\n  args: TArgs | null;\n\n  // The name of the field, equal to options.field.name.value when\n  // options.field is available. Useful if you reuse the same function for\n  // multiple fields, and you need to know which field you're currently\n  // processing. Always a string, even when options.field is null.\n  fieldName: string;\n\n  // The full field key used internally, including serialized key arguments.\n  storeFieldName: string;\n\n  // The FieldNode object used to read this field. Useful if you need to\n  // know about other attributes of the field, such as its directives. This\n  // option will be null when a string was passed to options.readField.\n  field: FieldNode | null;\n\n  variables?: TVars;\n\n  // Utilities for dealing with { __ref } objects.\n  isReference: typeof isReference;\n  toReference: ToReferenceFunction;\n\n  // A handy place to put field-specific data that you want to survive\n  // across multiple read function calls. Useful for field-level caching,\n  // if your read function does any expensive work.\n  storage: StorageType;\n\n  cache: InMemoryCache;\n\n  // Helper function for reading other fields within the current object.\n  // If a foreign object or reference is provided, the field will be read\n  // from that object instead of the current object, so this function can\n  // be used (together with isReference) to examine the cache outside the\n  // current object. If a FieldNode is passed instead of a string, and\n  // that FieldNode has arguments, the same options.variables will be used\n  // to compute the argument values. Note that this function will invoke\n  // custom read functions for other fields, if defined. Always returns\n  // immutable data (enforced with Object.freeze in development).\n  readField: ReadFieldFunction;\n\n  // Returns true for non-normalized StoreObjects and non-dangling\n  // References, indicating that readField(name, objOrRef) has a chance of\n  // working. Useful for filtering out dangling references from lists.\n  canRead: CanReadFunction;\n\n  // Instead of just merging objects with { ...existing, ...incoming }, this\n  // helper function can be used to merge objects in a way that respects any\n  // custom merge functions defined for their fields.\n  mergeObjects: MergeObjectsFunction;\n}\n\ntype MergeObjectsFunction = <T extends StoreObject | Reference>(\n  existing: T,\n  incoming: T,\n) => T;\n\nexport type FieldReadFunction<TExisting = any, TReadResult = TExisting> = (\n  // When reading a field, one often needs to know about any existing\n  // value stored for that field. If the field is read before any value\n  // has been written to the cache, this existing parameter will be\n  // undefined, which makes it easy to use a default parameter expression\n  // to supply the initial value. This parameter is positional (rather\n  // than one of the named options) because that makes it possible for the\n  // developer to annotate it with a type, without also having to provide\n  // a whole new type for the options object.\n  existing: SafeReadonly<TExisting> | undefined,\n  options: FieldFunctionOptions,\n) => TReadResult | undefined;\n\nexport type FieldMergeFunction<TExisting = any, TIncoming = TExisting> = (\n  existing: SafeReadonly<TExisting> | undefined,\n  // The incoming parameter needs to be positional as well, for the same\n  // reasons discussed in FieldReadFunction above.\n  incoming: SafeReadonly<TIncoming>,\n  options: FieldFunctionOptions,\n) => SafeReadonly<TExisting>;\n\nexport const defaultDataIdFromObject = (\n  { __typename, id, _id }: Readonly<StoreObject>,\n  context?: KeyFieldsContext,\n) => {\n  if (typeof __typename === \"string\") {\n    if (context) {\n      context.keyObject =\n         id !== void 0 ? {  id } :\n        _id !== void 0 ? { _id } :\n        void 0;\n    }\n    // If there is no object.id, fall back to object._id.\n    if (id === void 0) id = _id;\n    if (id !== void 0) {\n      return `${__typename}:${(\n        typeof id === \"number\" ||\n        typeof id === \"string\"\n      ) ? id : JSON.stringify(id)}`;\n    }\n  }\n};\n\nconst nullKeyFieldsFn: KeyFieldsFunction = () => void 0;\nconst simpleKeyArgsFn: KeyArgsFunction = (_args, context) => context.fieldName;\n\n// These merge functions can be selected by specifying merge:true or\n// merge:false in a field policy.\nconst mergeTrueFn: FieldMergeFunction<any> =\n  (existing, incoming, { mergeObjects }) => mergeObjects(existing, incoming);\nconst mergeFalseFn: FieldMergeFunction<any> = (_, incoming) => incoming;\n\nexport type PossibleTypesMap = {\n  [supertype: string]: string[];\n};\n\nexport class Policies {\n  private typePolicies: {\n    [__typename: string]: {\n      keyFn?: KeyFieldsFunction;\n      merge?: FieldMergeFunction<any>;\n      fields: {\n        [fieldName: string]: {\n          keyFn?: KeyArgsFunction;\n          read?: FieldReadFunction<any>;\n          merge?: FieldMergeFunction<any>;\n        };\n      };\n    };\n  } = Object.create(null);\n\n  private toBeAdded: {\n    [__typename: string]: TypePolicy[];\n  } = Object.create(null);\n\n  // Map from subtype names to sets of supertype names. Note that this\n  // representation inverts the structure of possibleTypes (whose keys are\n  // supertypes and whose values are arrays of subtypes) because it tends\n  // to be much more efficient to search upwards than downwards.\n  private supertypeMap = new Map<string, Set<string>>();\n\n  // Any fuzzy subtypes specified by possibleTypes will be converted to\n  // RegExp objects and recorded here. Every key of this map can also be\n  // found in supertypeMap. In many cases this Map will be empty, which\n  // means no fuzzy subtype checking will happen in fragmentMatches.\n  private fuzzySubtypes = new Map<string, RegExp>();\n\n  public readonly cache: InMemoryCache;\n\n  public readonly rootIdsByTypename: Record<string, string> = Object.create(null);\n  public readonly rootTypenamesById: Record<string, string> = Object.create(null);\n\n  public readonly usingPossibleTypes = false;\n\n  constructor(private config: {\n    cache: InMemoryCache;\n    dataIdFromObject?: KeyFieldsFunction;\n    possibleTypes?: PossibleTypesMap;\n    typePolicies?: TypePolicies;\n  }) {\n    this.config = {\n      dataIdFromObject: defaultDataIdFromObject,\n      ...config,\n    };\n\n    this.cache = this.config.cache;\n\n    this.setRootTypename(\"Query\");\n    this.setRootTypename(\"Mutation\");\n    this.setRootTypename(\"Subscription\");\n\n    if (config.possibleTypes) {\n      this.addPossibleTypes(config.possibleTypes);\n    }\n\n    if (config.typePolicies) {\n      this.addTypePolicies(config.typePolicies);\n    }\n  }\n\n  public identify(\n    object: StoreObject,\n    selectionSet?: SelectionSetNode,\n    fragmentMap?: FragmentMap,\n  ): [string?, StoreObject?] {\n    // TODO Use an AliasMap here?\n    const typename = selectionSet && fragmentMap\n      ? getTypenameFromResult(object, selectionSet, fragmentMap)\n      : object.__typename;\n\n    // It should be possible to write root Query fields with\n    // writeFragment, using { __typename: \"Query\", ... } as the data, but\n    // it does not make sense to allow the same identification behavior\n    // for the Mutation and Subscription types, since application code\n    // should never be writing directly to (or reading directly from)\n    // those root objects.\n    if (typename === this.rootTypenamesById.ROOT_QUERY) {\n      return [\"ROOT_QUERY\"];\n    }\n\n    const context: KeyFieldsContext = {\n      typename,\n      selectionSet,\n      fragmentMap,\n    };\n\n    let id: KeyFieldsResult;\n\n    const policy = typename && this.getTypePolicy(typename);\n    let keyFn = policy && policy.keyFn || this.config.dataIdFromObject;\n    while (keyFn) {\n      const specifierOrId = keyFn(object, context);\n      if (Array.isArray(specifierOrId)) {\n        keyFn = keyFieldsFnFromSpecifier(specifierOrId);\n      } else {\n        id = specifierOrId;\n        break;\n      }\n    }\n\n    id = id ? String(id) : void 0;\n    return context.keyObject ? [id, context.keyObject] : [id];\n  }\n\n  public addTypePolicies(typePolicies: TypePolicies) {\n    Object.keys(typePolicies).forEach(typename => {\n      const {\n        queryType,\n        mutationType,\n        subscriptionType,\n        ...incoming\n      } = typePolicies[typename];\n\n      // Though {query,mutation,subscription}Type configurations are rare,\n      // it's important to call setRootTypename as early as possible,\n      // since these configurations should apply consistently for the\n      // entire lifetime of the cache. Also, since only one __typename can\n      // qualify as one of these root types, these three properties cannot\n      // be inherited, unlike the rest of the incoming properties. That\n      // restriction is convenient, because the purpose of this.toBeAdded\n      // is to delay the processing of type/field policies until the first\n      // time they're used, allowing policies to be added in any order as\n      // long as all relevant policies (including policies for supertypes)\n      // have been added by the time a given policy is used for the first\n      // time. In other words, since inheritance doesn't matter for these\n      // properties, there's also no need to delay their processing using\n      // the this.toBeAdded queue.\n      if (queryType) this.setRootTypename(\"Query\", typename);\n      if (mutationType) this.setRootTypename(\"Mutation\", typename);\n      if (subscriptionType) this.setRootTypename(\"Subscription\", typename);\n\n      if (hasOwn.call(this.toBeAdded, typename)) {\n        this.toBeAdded[typename].push(incoming);\n      } else {\n        this.toBeAdded[typename] = [incoming];\n      }\n    });\n  }\n\n  private updateTypePolicy(typename: string, incoming: TypePolicy) {\n    const existing = this.getTypePolicy(typename);\n    const { keyFields, fields } = incoming;\n\n    function setMerge(\n      existing: { merge?: FieldMergeFunction | boolean; },\n      merge?: FieldMergeFunction | boolean,\n    ) {\n      existing.merge =\n        typeof merge === \"function\" ? merge :\n        // Pass merge:true as a shorthand for a merge implementation\n        // that returns options.mergeObjects(existing, incoming).\n        merge === true ? mergeTrueFn :\n        // Pass merge:false to make incoming always replace existing\n        // without any warnings about data clobbering.\n        merge === false ? mergeFalseFn :\n        existing.merge;\n    }\n\n    // Type policies can define merge functions, as an alternative to\n    // using field policies to merge child objects.\n    setMerge(existing, incoming.merge);\n\n    existing.keyFn =\n      // Pass false to disable normalization for this typename.\n      keyFields === false ? nullKeyFieldsFn :\n      // Pass an array of strings to use those fields to compute a\n      // composite ID for objects of this typename.\n      Array.isArray(keyFields) ? keyFieldsFnFromSpecifier(keyFields) :\n      // Pass a function to take full control over identification.\n      typeof keyFields === \"function\" ? keyFields :\n      // Leave existing.keyFn unchanged if above cases fail.\n      existing.keyFn;\n\n    if (fields) {\n      Object.keys(fields).forEach(fieldName => {\n        const existing = this.getFieldPolicy(typename, fieldName, true)!;\n        const incoming = fields[fieldName];\n\n        if (typeof incoming === \"function\") {\n          existing.read = incoming;\n        } else {\n          const { keyArgs, read, merge } = incoming;\n\n          existing.keyFn =\n            // Pass false to disable argument-based differentiation of\n            // field identities.\n            keyArgs === false ? simpleKeyArgsFn :\n            // Pass an array of strings to use named arguments to\n            // compute a composite identity for the field.\n            Array.isArray(keyArgs) ? keyArgsFnFromSpecifier(keyArgs) :\n            // Pass a function to take full control over field identity.\n            typeof keyArgs === \"function\" ? keyArgs :\n            // Leave existing.keyFn unchanged if above cases fail.\n            existing.keyFn;\n\n          if (typeof read === \"function\") {\n            existing.read = read;\n          }\n\n          setMerge(existing, merge);\n        }\n\n        if (existing.read && existing.merge) {\n          // If we have both a read and a merge function, assume\n          // keyArgs:false, because read and merge together can take\n          // responsibility for interpreting arguments in and out. This\n          // default assumption can always be overridden by specifying\n          // keyArgs explicitly in the FieldPolicy.\n          existing.keyFn = existing.keyFn || simpleKeyArgsFn;\n        }\n      });\n    }\n  }\n\n  private setRootTypename(\n    which: \"Query\" | \"Mutation\" | \"Subscription\",\n    typename: string = which,\n  ) {\n    const rootId = \"ROOT_\" + which.toUpperCase();\n    const old = this.rootTypenamesById[rootId];\n    if (typename !== old) {\n      invariant(!old || old === which, `Cannot change root ${which} __typename more than once`);\n      // First, delete any old __typename associated with this rootId from\n      // rootIdsByTypename.\n      if (old) delete this.rootIdsByTypename[old];\n      // Now make this the only __typename that maps to this rootId.\n      this.rootIdsByTypename[typename] = rootId;\n      // Finally, update the __typename associated with this rootId.\n      this.rootTypenamesById[rootId] = typename;\n    }\n  }\n\n  public addPossibleTypes(possibleTypes: PossibleTypesMap) {\n    (this.usingPossibleTypes as boolean) = true;\n    Object.keys(possibleTypes).forEach(supertype => {\n      // Make sure all types have an entry in this.supertypeMap, even if\n      // their supertype set is empty, so we can return false immediately\n      // from policies.fragmentMatches for unknown supertypes.\n      this.getSupertypeSet(supertype, true);\n\n      possibleTypes[supertype].forEach(subtype => {\n        this.getSupertypeSet(subtype, true)!.add(supertype);\n        const match = subtype.match(TypeOrFieldNameRegExp);\n        if (!match || match[0] !== subtype) {\n          // TODO Don't interpret just any invalid typename as a RegExp.\n          this.fuzzySubtypes.set(subtype, new RegExp(subtype));\n        }\n      });\n    });\n  }\n\n  private getTypePolicy(typename: string): Policies[\"typePolicies\"][string] {\n    if (!hasOwn.call(this.typePolicies, typename)) {\n      const policy: Policies[\"typePolicies\"][string] =\n        this.typePolicies[typename] = Object.create(null);\n      policy.fields = Object.create(null);\n\n      // When the TypePolicy for typename is first accessed, instead of\n      // starting with an empty policy object, inherit any properties or\n      // fields from the type policies of the supertypes of typename.\n      //\n      // Any properties or fields defined explicitly within the TypePolicy\n      // for typename will take precedence, and if there are multiple\n      // supertypes, the properties of policies whose types were added\n      // later via addPossibleTypes will take precedence over those of\n      // earlier supertypes. TODO Perhaps we should warn about these\n      // conflicts in development, and recommend defining the property\n      // explicitly in the subtype policy?\n      //\n      // Field policy inheritance is atomic/shallow: you can't inherit a\n      // field policy and then override just its read function, since read\n      // and merge functions often need to cooperate, so changing only one\n      // of them would be a recipe for inconsistency.\n      //\n      // Once the TypePolicy for typename has been accessed, its\n      // properties can still be updated directly using addTypePolicies,\n      // but future changes to supertype policies will not be reflected in\n      // this policy, because this code runs at most once per typename.\n      const supertypes = this.supertypeMap.get(typename);\n      if (supertypes && supertypes.size) {\n        supertypes.forEach(supertype => {\n          const { fields, ...rest } = this.getTypePolicy(supertype);\n          Object.assign(policy, rest);\n          Object.assign(policy.fields, fields);\n        });\n      }\n    }\n\n    const inbox = this.toBeAdded[typename];\n    if (inbox && inbox.length) {\n      this.updateTypePolicy(typename, compact(...inbox.splice(0)));\n    }\n\n    return this.typePolicies[typename];\n  }\n\n  private getFieldPolicy(\n    typename: string | undefined,\n    fieldName: string,\n    createIfMissing: boolean,\n  ): {\n    keyFn?: KeyArgsFunction;\n    read?: FieldReadFunction<any>;\n    merge?: FieldMergeFunction<any>;\n  } | undefined {\n    if (typename) {\n      const fieldPolicies = this.getTypePolicy(typename).fields;\n      return fieldPolicies[fieldName] || (\n        createIfMissing && (fieldPolicies[fieldName] = Object.create(null)));\n    }\n  }\n\n  private getSupertypeSet(\n    subtype: string,\n    createIfMissing: boolean,\n  ): Set<string> | undefined {\n    let supertypeSet = this.supertypeMap.get(subtype);\n    if (!supertypeSet && createIfMissing) {\n      this.supertypeMap.set(subtype, supertypeSet = new Set<string>());\n    }\n    return supertypeSet;\n  }\n\n  public fragmentMatches(\n    fragment: InlineFragmentNode | FragmentDefinitionNode,\n    typename: string | undefined,\n    result?: Record<string, any>,\n    variables?: Record<string, any>,\n  ): boolean {\n    if (!fragment.typeCondition) return true;\n\n    // If the fragment has a type condition but the object we're matching\n    // against does not have a __typename, the fragment cannot match.\n    if (!typename) return false;\n\n    const supertype = fragment.typeCondition.name.value;\n    // Common case: fragment type condition and __typename are the same.\n    if (typename === supertype) return true;\n\n    if (this.usingPossibleTypes &&\n        this.supertypeMap.has(supertype)) {\n      const typenameSupertypeSet = this.getSupertypeSet(typename, true)!;\n      const workQueue = [typenameSupertypeSet];\n      const maybeEnqueue = (subtype: string) => {\n        const supertypeSet = this.getSupertypeSet(subtype, false);\n        if (supertypeSet &&\n            supertypeSet.size &&\n            workQueue.indexOf(supertypeSet) < 0) {\n          workQueue.push(supertypeSet);\n        }\n      };\n\n      // We need to check fuzzy subtypes only if we encountered fuzzy\n      // subtype strings in addPossibleTypes, and only while writing to\n      // the cache, since that's when selectionSetMatchesResult gives a\n      // strong signal of fragment matching. The StoreReader class calls\n      // policies.fragmentMatches without passing a result object, so\n      // needToCheckFuzzySubtypes is always false while reading.\n      let needToCheckFuzzySubtypes = !!(result && this.fuzzySubtypes.size);\n      let checkingFuzzySubtypes = false;\n\n      // It's important to keep evaluating workQueue.length each time through\n      // the loop, because the queue can grow while we're iterating over it.\n      for (let i = 0; i < workQueue.length; ++i) {\n        const supertypeSet = workQueue[i];\n\n        if (supertypeSet.has(supertype)) {\n          if (!typenameSupertypeSet.has(supertype)) {\n            if (checkingFuzzySubtypes) {\n              invariant.warn(`Inferring subtype ${typename} of supertype ${supertype}`);\n            }\n            // Record positive results for faster future lookup.\n            // Unfortunately, we cannot safely cache negative results,\n            // because new possibleTypes data could always be added to the\n            // Policies class.\n            typenameSupertypeSet.add(supertype);\n          }\n          return true;\n        }\n\n        supertypeSet.forEach(maybeEnqueue);\n\n        if (needToCheckFuzzySubtypes &&\n            // Start checking fuzzy subtypes only after exhausting all\n            // non-fuzzy subtypes (after the final iteration of the loop).\n            i === workQueue.length - 1 &&\n            // We could wait to compare fragment.selectionSet to result\n            // after we verify the supertype, but this check is often less\n            // expensive than that search, and we will have to do the\n            // comparison anyway whenever we find a potential match.\n            selectionSetMatchesResult(fragment.selectionSet, result!, variables)) {\n          // We don't always need to check fuzzy subtypes (if no result\n          // was provided, or !this.fuzzySubtypes.size), but, when we do,\n          // we only want to check them once.\n          needToCheckFuzzySubtypes = false;\n          checkingFuzzySubtypes = true;\n\n          // If we find any fuzzy subtypes that match typename, extend the\n          // workQueue to search through the supertypes of those fuzzy\n          // subtypes. Otherwise the for-loop will terminate and we'll\n          // return false below.\n          this.fuzzySubtypes.forEach((regExp, fuzzyString) => {\n            const match = typename.match(regExp);\n            if (match && match[0] === typename) {\n              maybeEnqueue(fuzzyString);\n            }\n          });\n        }\n      }\n    }\n\n    return false;\n  }\n\n  public hasKeyArgs(typename: string | undefined, fieldName: string) {\n    const policy = this.getFieldPolicy(typename, fieldName, false);\n    return !!(policy && policy.keyFn);\n  }\n\n  public getStoreFieldName(fieldSpec: FieldSpecifier): string {\n    const { typename, fieldName } = fieldSpec;\n    const policy = this.getFieldPolicy(typename, fieldName, false);\n    let storeFieldName: KeyArgsResult;\n\n    let keyFn = policy && policy.keyFn;\n    if (keyFn && typename) {\n      const context: Parameters<KeyArgsFunction>[1] = {\n        typename,\n        fieldName,\n        field: fieldSpec.field || null,\n        variables: fieldSpec.variables,\n      };\n      const args = argsFromFieldSpecifier(fieldSpec);\n      while (keyFn) {\n        const specifierOrString = keyFn(args, context);\n        if (Array.isArray(specifierOrString)) {\n          keyFn = keyArgsFnFromSpecifier(specifierOrString);\n        } else {\n          // If the custom keyFn returns a falsy value, fall back to\n          // fieldName instead.\n          storeFieldName = specifierOrString || fieldName;\n          break;\n        }\n      }\n    }\n\n    if (storeFieldName === void 0) {\n      storeFieldName = fieldSpec.field\n        ? storeKeyNameFromField(fieldSpec.field, fieldSpec.variables)\n        : getStoreKeyName(fieldName, argsFromFieldSpecifier(fieldSpec));\n    }\n\n    // Returning false from a keyArgs function is like configuring\n    // keyArgs: false, but more dynamic.\n    if (storeFieldName === false) {\n      return fieldName;\n    }\n\n    // Make sure custom field names start with the actual field.name.value\n    // of the field, so we can always figure out which properties of a\n    // StoreObject correspond to which original field names.\n    return fieldName === fieldNameFromStoreName(storeFieldName)\n      ? storeFieldName\n      : fieldName + \":\" + storeFieldName;\n  }\n\n  public readField<V = StoreValue>(\n    options: ReadFieldOptions,\n    context: ReadMergeModifyContext,\n  ): SafeReadonly<V> | undefined {\n    const objectOrReference = options.from;\n    if (!objectOrReference) return;\n\n    const nameOrField = options.field || options.fieldName;\n    if (!nameOrField) return;\n\n    if (options.typename === void 0) {\n      const typename = context.store.getFieldValue<string>(objectOrReference, \"__typename\");\n      if (typename) options.typename = typename;\n    }\n\n    const storeFieldName = this.getStoreFieldName(options);\n    const fieldName = fieldNameFromStoreName(storeFieldName);\n    const existing = context.store.getFieldValue<V>(objectOrReference, storeFieldName);\n    const policy = this.getFieldPolicy(options.typename, fieldName, false);\n    const read = policy && policy.read;\n\n    if (read) {\n      const readOptions = makeFieldFunctionOptions(\n        this,\n        objectOrReference,\n        options,\n        context,\n        context.store.getStorage(\n          isReference(objectOrReference)\n            ? objectOrReference.__ref\n            : objectOrReference,\n          storeFieldName,\n        ),\n      );\n\n      // Call read(existing, readOptions) with cacheSlot holding this.cache.\n      return cacheSlot.withValue(\n        this.cache,\n        read,\n        [existing, readOptions],\n      ) as SafeReadonly<V>;\n    }\n\n    return existing;\n  }\n\n  public getMergeFunction(\n    parentTypename: string | undefined,\n    fieldName: string,\n    childTypename: string | undefined,\n  ): FieldMergeFunction | undefined {\n    let policy:\n      | Policies[\"typePolicies\"][string]\n      | Policies[\"typePolicies\"][string][\"fields\"][string]\n      | undefined =\n      this.getFieldPolicy(parentTypename, fieldName, false);\n    let merge = policy && policy.merge;\n    if (!merge && childTypename) {\n      policy = this.getTypePolicy(childTypename);\n      merge = policy && policy.merge;\n    }\n    return merge;\n  }\n\n  public runMergeFunction(\n    existing: StoreValue,\n    incoming: StoreValue,\n    { field, typename, merge }: MergeInfo,\n    context: ReadMergeModifyContext,\n    storage?: StorageType,\n  ) {\n    if (merge === mergeTrueFn) {\n      // Instead of going to the trouble of creating a full\n      // FieldFunctionOptions object and calling mergeTrueFn, we can\n      // simply call mergeObjects, as mergeTrueFn would.\n      return makeMergeObjectsFunction(\n        context.store.getFieldValue\n      )(existing as StoreObject,\n        incoming as StoreObject);\n    }\n\n    if (merge === mergeFalseFn) {\n      // Likewise for mergeFalseFn, whose implementation is even simpler.\n      return incoming;\n    }\n\n    return merge(existing, incoming, makeFieldFunctionOptions(\n      this,\n      // Unlike options.readField for read functions, we do not fall\n      // back to the current object if no foreignObjOrRef is provided,\n      // because it's not clear what the current object should be for\n      // merge functions: the (possibly undefined) existing object, or\n      // the incoming object? If you think your merge function needs\n      // to read sibling fields in order to produce a new value for\n      // the current field, you might want to rethink your strategy,\n      // because that's a recipe for making merge behavior sensitive\n      // to the order in which fields are written into the cache.\n      // However, readField(name, ref) is useful for merge functions\n      // that need to deduplicate child objects and references.\n      void 0,\n      { typename,\n        fieldName: field.name.value,\n        field,\n        variables: context.variables },\n      context,\n      storage || Object.create(null),\n    ));\n  }\n}\n\nfunction makeFieldFunctionOptions(\n  policies: Policies,\n  objectOrReference: StoreObject | Reference | undefined,\n  fieldSpec: FieldSpecifier,\n  context: ReadMergeModifyContext,\n  storage: StorageType,\n): FieldFunctionOptions {\n  const storeFieldName = policies.getStoreFieldName(fieldSpec);\n  const fieldName = fieldNameFromStoreName(storeFieldName);\n  const variables = fieldSpec.variables || context.variables;\n  const { getFieldValue, toReference, canRead } = context.store;\n\n  return {\n    args: argsFromFieldSpecifier(fieldSpec),\n    field: fieldSpec.field || null,\n    fieldName,\n    storeFieldName,\n    variables,\n    isReference,\n    toReference,\n    storage,\n    cache: policies.cache,\n    canRead,\n\n    readField<T>(\n      fieldNameOrOptions: string | ReadFieldOptions,\n      from?: StoreObject | Reference,\n    ) {\n      const options: ReadFieldOptions =\n        typeof fieldNameOrOptions === \"string\" ? {\n          fieldName: fieldNameOrOptions,\n          from,\n        } : { ...fieldNameOrOptions };\n\n      if (void 0 === options.from) {\n        options.from = objectOrReference;\n      }\n\n      if (void 0 === options.variables) {\n        options.variables = variables;\n      }\n\n      return policies.readField<T>(options, context);\n    },\n\n    mergeObjects: makeMergeObjectsFunction(getFieldValue),\n  };\n}\n\nfunction makeMergeObjectsFunction(\n  getFieldValue: FieldValueGetter,\n): MergeObjectsFunction {\n  return function mergeObjects(existing, incoming) {\n    if (Array.isArray(existing) || Array.isArray(incoming)) {\n      throw new InvariantError(\"Cannot automatically merge arrays\");\n    }\n\n    // These dynamic checks are necessary because the parameters of a\n    // custom merge function can easily have the any type, so the type\n    // system cannot always enforce the StoreObject | Reference parameter\n    // types of options.mergeObjects.\n    if (existing && typeof existing === \"object\" &&\n        incoming && typeof incoming === \"object\") {\n      const eType = getFieldValue(existing, \"__typename\");\n      const iType = getFieldValue(incoming, \"__typename\");\n      const typesDiffer = eType && iType && eType !== iType;\n\n      if (typesDiffer ||\n          !storeValueIsStoreObject(existing) ||\n          !storeValueIsStoreObject(incoming)) {\n        return incoming;\n      }\n\n      return { ...existing, ...incoming };\n    }\n\n    return incoming;\n  };\n}\n\nfunction keyArgsFnFromSpecifier(\n  specifier: KeySpecifier,\n): KeyArgsFunction {\n  return (args, context) => {\n    return args ? `${context.fieldName}:${\n      JSON.stringify(computeKeyObject(args, specifier, false))\n    }` : context.fieldName;\n  };\n}\n\nfunction keyFieldsFnFromSpecifier(\n  specifier: KeySpecifier,\n): KeyFieldsFunction {\n  const trie = new KeyTrie<{\n    aliasMap?: AliasMap;\n  }>(canUseWeakMap);\n\n  return (object, context) => {\n    let aliasMap: AliasMap | undefined;\n    if (context.selectionSet && context.fragmentMap) {\n      const info = trie.lookupArray([\n        context.selectionSet,\n        context.fragmentMap,\n      ]);\n      aliasMap = info.aliasMap || (\n        info.aliasMap = makeAliasMap(context.selectionSet, context.fragmentMap)\n      );\n    }\n\n    const keyObject = context.keyObject =\n      computeKeyObject(object, specifier, true, aliasMap);\n\n    return `${context.typename}:${JSON.stringify(keyObject)}`;\n  };\n}\n\ntype AliasMap = {\n  // Map from store key to corresponding response key. Undefined when there are\n  // no aliased fields in this selection set.\n  aliases?: Record<string, string>;\n  // Map from store key to AliasMap correponding to a child selection set.\n  // Undefined when there are no child selection sets.\n  subsets?: Record<string, AliasMap>;\n};\n\nfunction makeAliasMap(\n  selectionSet: SelectionSetNode,\n  fragmentMap: FragmentMap,\n): AliasMap {\n  let map: AliasMap = Object.create(null);\n  // TODO Cache this work, perhaps by storing selectionSet._aliasMap?\n  const workQueue = new Set([selectionSet]);\n  workQueue.forEach(selectionSet => {\n    selectionSet.selections.forEach(selection => {\n      if (isField(selection)) {\n        if (selection.alias) {\n          const responseKey = selection.alias.value;\n          const storeKey = selection.name.value;\n          if (storeKey !== responseKey) {\n            const aliases = map.aliases || (map.aliases = Object.create(null));\n            aliases[storeKey] = responseKey;\n          }\n        }\n        if (selection.selectionSet) {\n          const subsets = map.subsets || (map.subsets = Object.create(null));\n          subsets[selection.name.value] =\n            makeAliasMap(selection.selectionSet, fragmentMap);\n        }\n      } else {\n        const fragment = getFragmentFromSelection(selection, fragmentMap);\n        if (fragment) {\n          workQueue.add(fragment.selectionSet);\n        }\n      }\n    });\n  });\n  return map;\n}\n\nfunction computeKeyObject(\n  response: Record<string, any>,\n  specifier: KeySpecifier,\n  strict: boolean,\n  aliasMap?: AliasMap,\n): Record<string, any> {\n  // The order of adding properties to keyObj affects its JSON serialization,\n  // so we are careful to build keyObj in the order of keys given in\n  // specifier.\n  const keyObj = Object.create(null);\n  let prevKey: string | undefined;\n  specifier.forEach(s => {\n    if (Array.isArray(s)) {\n      if (typeof prevKey === \"string\") {\n        const subsets = aliasMap && aliasMap.subsets;\n        const subset = subsets && subsets[prevKey];\n        keyObj[prevKey] = computeKeyObject(response[prevKey], s, strict, subset);\n      }\n    } else {\n      const aliases = aliasMap && aliasMap.aliases;\n      const responseName = aliases && aliases[s] || s;\n      if (hasOwn.call(response, responseName)) {\n        keyObj[prevKey = s] = response[responseName];\n      } else {\n        invariant(!strict, `Missing field '${responseName}' while computing key fields`);\n        prevKey = void 0;\n      }\n    }\n  });\n  return keyObj;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}