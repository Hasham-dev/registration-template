{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { useContext, useState, useRef, useEffect } from 'react';\nimport { MutationData } from \"../data/index.js\";\nimport { getApolloContext } from \"../context/index.js\";\nexport function useMutation(mutation, options) {\n  var context = useContext(getApolloContext());\n  var _a = useState({\n      called: false,\n      loading: false\n    }),\n    result = _a[0],\n    setResult = _a[1];\n  var updatedOptions = options ? __assign(__assign({}, options), {\n    mutation: mutation\n  }) : {\n    mutation: mutation\n  };\n  var mutationDataRef = useRef();\n  function getMutationDataRef() {\n    if (!mutationDataRef.current) {\n      mutationDataRef.current = new MutationData({\n        options: updatedOptions,\n        context: context,\n        result: result,\n        setResult: setResult\n      });\n    }\n    return mutationDataRef.current;\n  }\n  var mutationData = getMutationDataRef();\n  mutationData.setOptions(updatedOptions);\n  mutationData.context = context;\n  useEffect(function () {\n    return mutationData.afterExecute();\n  });\n  return mutationData.execute(result);\n}","map":{"version":3,"sources":["../../../src/react/hooks/useMutation.ts"],"names":[],"mappings":";AAAA,SAAS,UAAU,EAAE,QAAQ,EAAE,MAAM,EAAE,SAAS,QAAQ,OAAO;AAK/D,SAAS,YAAY,QAAQ,kBAAU;AAEvC,SAAS,gBAAgB,QAAQ,qBAAa;AAE9C,OAAM,SAAU,WAAW,CACzB,QAA6D,EAC7D,OAAgD,EAAA;EAEhD,IAAM,OAAO,GAAG,UAAU,CAAC,gBAAgB,EAAE,CAAC;EACxC,IAAA,EAAA,GAAsB,QAAQ,CAAC;MAAE,MAAM,EAAE,KAAK;MAAE,OAAO,EAAE;IAAK,CAAE,CAAC;IAAhE,MAAM,GAAA,EAAA,CAAA,CAAA,CAAA;IAAE,SAAS,GAAA,EAAA,CAAA,CAAA,CAA+C;EACvE,IAAM,cAAc,GAAG,OAAO,GAAE,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EAAM,OAAO,CAAA,EAAA;IAAE,QAAQ,EAAA;EAAA,CAAA,CAAA,GAAK;IAAE,QAAQ,EAAA;EAAA,CAAE;EAExE,IAAM,eAAe,GAAG,MAAM,EAAmC;EACjE,SAAS,kBAAkB,GAAA;IACzB,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE;MAC5B,eAAe,CAAC,OAAO,GAAG,IAAI,YAAY,CAAoB;QAC5D,OAAO,EAAE,cAAc;QACvB,OAAO,EAAA,OAAA;QACP,MAAM,EAAA,MAAA;QACN,SAAS,EAAA;OACV,CAAC;IACH;IACD,OAAO,eAAe,CAAC,OAAO;EAChC;EAEA,IAAM,YAAY,GAAG,kBAAkB,EAAE;EACzC,YAAY,CAAC,UAAU,CAAC,cAAc,CAAC;EACvC,YAAY,CAAC,OAAO,GAAG,OAAO;EAE9B,SAAS,CAAC,YAAA;IAAM,OAAA,YAAY,CAAC,YAAY,EAAE;EAA3B,CAA2B,CAAC;EAE5C,OAAO,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC;AACrC","sourcesContent":["import { useContext, useState, useRef, useEffect } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\n\nimport { MutationHookOptions, MutationTuple } from '../types/types';\nimport { MutationData } from '../data';\nimport { OperationVariables } from '../../core';\nimport { getApolloContext } from '../context';\n\nexport function useMutation<TData = any, TVariables = OperationVariables>(\n  mutation: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: MutationHookOptions<TData, TVariables>\n): MutationTuple<TData, TVariables> {\n  const context = useContext(getApolloContext());\n  const [result, setResult] = useState({ called: false, loading: false });\n  const updatedOptions = options ? { ...options, mutation } : { mutation };\n\n  const mutationDataRef = useRef<MutationData<TData, TVariables>>();\n  function getMutationDataRef() {\n    if (!mutationDataRef.current) {\n      mutationDataRef.current = new MutationData<TData, TVariables>({\n        options: updatedOptions,\n        context,\n        result,\n        setResult\n      });\n    }\n    return mutationDataRef.current;\n  }\n\n  const mutationData = getMutationDataRef();\n  mutationData.setOptions(updatedOptions);\n  mutationData.context = context;\n\n  useEffect(() => mutationData.afterExecute());\n\n  return mutationData.execute(result);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}