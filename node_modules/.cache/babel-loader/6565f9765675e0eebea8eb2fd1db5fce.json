{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { equal } from '@wry/equality';\nimport { DocumentType } from \"../parser/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\nimport { OperationData } from \"./OperationData.js\";\nimport { mergeOptions } from \"../../core/index.js\";\nvar MutationData = function (_super) {\n  __extends(MutationData, _super);\n  function MutationData(_a) {\n    var options = _a.options,\n      context = _a.context,\n      result = _a.result,\n      setResult = _a.setResult;\n    var _this = _super.call(this, options, context) || this;\n    _this.runMutation = function (mutationFunctionOptions) {\n      if (mutationFunctionOptions === void 0) {\n        mutationFunctionOptions = {};\n      }\n      _this.onMutationStart();\n      var mutationId = _this.generateNewMutationId();\n      return _this.mutate(mutationFunctionOptions).then(function (response) {\n        _this.onMutationCompleted(response, mutationId);\n        return response;\n      }).catch(function (error) {\n        _this.onMutationError(error, mutationId);\n        if (!_this.getOptions().onError) throw error;\n      });\n    };\n    _this.verifyDocumentType(options.mutation, DocumentType.Mutation);\n    _this.result = result;\n    _this.setResult = setResult;\n    _this.mostRecentMutationId = 0;\n    return _this;\n  }\n  MutationData.prototype.execute = function (result) {\n    this.isMounted = true;\n    this.verifyDocumentType(this.getOptions().mutation, DocumentType.Mutation);\n    return [this.runMutation, __assign(__assign({}, result), {\n      client: this.refreshClient().client\n    })];\n  };\n  MutationData.prototype.afterExecute = function () {\n    this.isMounted = true;\n    return this.unmount.bind(this);\n  };\n  MutationData.prototype.cleanup = function () {};\n  MutationData.prototype.mutate = function (options) {\n    return this.refreshClient().client.mutate(mergeOptions(this.getOptions(), options));\n  };\n  MutationData.prototype.onMutationStart = function () {\n    if (!this.result.loading && !this.getOptions().ignoreResults) {\n      this.updateResult({\n        loading: true,\n        error: undefined,\n        data: undefined,\n        called: true\n      });\n    }\n  };\n  MutationData.prototype.onMutationCompleted = function (response, mutationId) {\n    var _a = this.getOptions(),\n      onCompleted = _a.onCompleted,\n      ignoreResults = _a.ignoreResults;\n    var data = response.data,\n      errors = response.errors;\n    var error = errors && errors.length > 0 ? new ApolloError({\n      graphQLErrors: errors\n    }) : undefined;\n    var callOncomplete = function callOncomplete() {\n      return onCompleted ? onCompleted(data) : null;\n    };\n    if (this.isMostRecentMutation(mutationId) && !ignoreResults) {\n      this.updateResult({\n        called: true,\n        loading: false,\n        data: data,\n        error: error\n      });\n    }\n    callOncomplete();\n  };\n  MutationData.prototype.onMutationError = function (error, mutationId) {\n    var onError = this.getOptions().onError;\n    if (this.isMostRecentMutation(mutationId)) {\n      this.updateResult({\n        loading: false,\n        error: error,\n        data: undefined,\n        called: true\n      });\n    }\n    if (onError) {\n      onError(error);\n    }\n  };\n  MutationData.prototype.generateNewMutationId = function () {\n    return ++this.mostRecentMutationId;\n  };\n  MutationData.prototype.isMostRecentMutation = function (mutationId) {\n    return this.mostRecentMutationId === mutationId;\n  };\n  MutationData.prototype.updateResult = function (result) {\n    if (this.isMounted && (!this.previousResult || !equal(this.previousResult, result))) {\n      this.setResult(result);\n      this.previousResult = result;\n    }\n  };\n  return MutationData;\n}(OperationData);\nexport { MutationData };","map":{"version":3,"sources":["../../../src/react/data/MutationData.ts"],"names":[],"mappings":"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","sourcesContent":["import { equal } from '@wry/equality';\n\nimport { DocumentType } from '../parser';\nimport { ApolloError } from '../../errors';\nimport {\n  MutationDataOptions,\n  MutationTuple,\n  MutationFunctionOptions,\n  MutationResult,\n} from '../types/types';\nimport { OperationData } from './OperationData';\nimport { OperationVariables, MutationOptions, mergeOptions } from '../../core';\nimport { FetchResult } from '../../link/core';\n\ntype MutationResultWithoutClient<TData = any> = Omit<MutationResult<TData>, 'client'>;\n\nexport class MutationData<\n  TData = any,\n  TVariables = OperationVariables\n> extends OperationData<MutationDataOptions<TData, TVariables>> {\n  private mostRecentMutationId: number;\n  private result: MutationResultWithoutClient<TData>;\n  private previousResult?: MutationResultWithoutClient<TData>;\n  private setResult: (result: MutationResultWithoutClient<TData>) => any;\n\n  constructor({\n    options,\n    context,\n    result,\n    setResult\n  }: {\n    options: MutationDataOptions<TData, TVariables>;\n    context: any;\n    result: MutationResultWithoutClient<TData>;\n    setResult: (result: MutationResultWithoutClient<TData>) => any;\n  }) {\n    super(options, context);\n    this.verifyDocumentType(options.mutation, DocumentType.Mutation);\n    this.result = result;\n    this.setResult = setResult;\n    this.mostRecentMutationId = 0;\n  }\n\n  public execute(result: MutationResultWithoutClient<TData>): MutationTuple<TData, TVariables> {\n    this.isMounted = true;\n    this.verifyDocumentType(this.getOptions().mutation, DocumentType.Mutation);\n    return [\n      this.runMutation,\n      { ...result, client: this.refreshClient().client }\n    ] as MutationTuple<TData, TVariables>;\n  }\n\n  public afterExecute() {\n    this.isMounted = true;\n    return this.unmount.bind(this);\n  }\n\n  public cleanup() {\n    // No cleanup required.\n  }\n\n  private runMutation = (\n    mutationFunctionOptions: MutationFunctionOptions<\n      TData,\n      TVariables\n    > = {} as MutationFunctionOptions<TData, TVariables>\n  ) => {\n    this.onMutationStart();\n    const mutationId = this.generateNewMutationId();\n\n    return this.mutate(mutationFunctionOptions)\n      .then((response: FetchResult<TData>) => {\n        this.onMutationCompleted(response, mutationId);\n        return response;\n      })\n      .catch((error: ApolloError) => {\n        this.onMutationError(error, mutationId);\n        if (!this.getOptions().onError) throw error;\n      });\n  };\n\n  private mutate(\n    options: MutationFunctionOptions<TData, TVariables>\n  ) {\n    return this.refreshClient().client.mutate(\n      mergeOptions(\n        this.getOptions(),\n        options as MutationOptions<TData, TVariables>,\n      ),\n    );\n  }\n\n  private onMutationStart() {\n    if (!this.result.loading && !this.getOptions().ignoreResults) {\n      this.updateResult({\n        loading: true,\n        error: undefined,\n        data: undefined,\n        called: true\n      });\n    }\n  }\n\n  private onMutationCompleted(\n    response: FetchResult<TData>,\n    mutationId: number\n  ) {\n    const { onCompleted, ignoreResults } = this.getOptions();\n\n    const { data, errors } = response;\n    const error =\n      errors && errors.length > 0\n        ? new ApolloError({ graphQLErrors: errors })\n        : undefined;\n\n    const callOncomplete = () =>\n      onCompleted ? onCompleted(data as TData) : null;\n\n    if (this.isMostRecentMutation(mutationId) && !ignoreResults) {\n      this.updateResult({\n        called: true,\n        loading: false,\n        data,\n        error\n      });\n    }\n    callOncomplete();\n  }\n\n  private onMutationError(error: ApolloError, mutationId: number) {\n    const { onError } = this.getOptions();\n\n    if (this.isMostRecentMutation(mutationId)) {\n      this.updateResult({\n        loading: false,\n        error,\n        data: undefined,\n        called: true\n      });\n    }\n\n    if (onError) {\n      onError(error);\n    }\n  }\n\n  private generateNewMutationId(): number {\n    return ++this.mostRecentMutationId;\n  }\n\n  private isMostRecentMutation(mutationId: number) {\n    return this.mostRecentMutationId === mutationId;\n  }\n\n  private updateResult(result: MutationResultWithoutClient<TData>) {\n    if (\n      this.isMounted &&\n      (!this.previousResult || !equal(this.previousResult, result))\n    ) {\n      this.setResult(result);\n      this.previousResult = result;\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}