{"ast":null,"code":"import { InvariantError } from 'ts-invariant';\nexport var serializeFetchParameter = function serializeFetchParameter(p, label) {\n  var serialized;\n  try {\n    serialized = JSON.stringify(p);\n  } catch (e) {\n    var parseError = process.env.NODE_ENV === \"production\" ? new InvariantError(23) : new InvariantError(\"Network request failed. \" + label + \" is not serializable: \" + e.message);\n    parseError.parseError = e;\n    throw parseError;\n  }\n  return serialized;\n};","map":{"version":3,"sources":["../../../src/link/http/serializeFetchParameter.ts"],"names":[],"mappings":"AAAA,SAAS,cAAc,QAAQ,cAAc;AAM7C,OAAO,IAAM,uBAAuB,GAAG,SAA1B,uBAAuB,CAAI,CAAM,EAAE,KAAa,EAAA;EAC3D,IAAI,UAAU;EACd,IAAI;IACF,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;GAC/B,CAAC,OAAO,CAAC,EAAE;IACV,IAAM,UAAU,GAAG,OAAI,CAAA,GAAA,CAAA,QACrB,KAAA,YAAA,GAAA,IAAA,cAAgC,CAAA,EAAA,CAAA,GAAA,IAAA,cAAyB,CAAC,0BACtC,GAAA,KAAA,GAAA,wBAAA,GAAA,CAAA,CAAA,OAAA,CAAA;IACtB,UAAU,CAAC,UAAU,GAAG,CAAC;IACzB,MAAM,UAAU;EACjB;EACD,OAAO,UAAU;AACnB,CAAC","sourcesContent":["import { InvariantError } from 'ts-invariant';\n\nexport type ClientParseError = InvariantError & {\n  parseError: Error;\n};\n\nexport const serializeFetchParameter = (p: any, label: string) => {\n  let serialized;\n  try {\n    serialized = JSON.stringify(p);\n  } catch (e) {\n    const parseError = new InvariantError(\n      `Network request failed. ${label} is not serializable: ${e.message}`,\n    ) as ClientParseError;\n    parseError.parseError = e;\n    throw parseError;\n  }\n  return serialized;\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}