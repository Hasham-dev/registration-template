{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { equal } from '@wry/equality';\nimport { OperationData } from \"./OperationData.js\";\nvar SubscriptionData = function (_super) {\n  __extends(SubscriptionData, _super);\n  function SubscriptionData(_a) {\n    var options = _a.options,\n      context = _a.context,\n      setResult = _a.setResult;\n    var _this = _super.call(this, options, context) || this;\n    _this.currentObservable = {};\n    _this.setResult = setResult;\n    _this.initialize(options);\n    return _this;\n  }\n  SubscriptionData.prototype.execute = function (result) {\n    if (this.getOptions().skip === true) {\n      this.cleanup();\n      return {\n        loading: false,\n        error: undefined,\n        data: undefined,\n        variables: this.getOptions().variables\n      };\n    }\n    var currentResult = result;\n    if (this.refreshClient().isNew) {\n      currentResult = this.getLoadingResult();\n    }\n    var shouldResubscribe = this.getOptions().shouldResubscribe;\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(this.getOptions());\n    }\n    if (shouldResubscribe !== false && this.previousOptions && Object.keys(this.previousOptions).length > 0 && (this.previousOptions.subscription !== this.getOptions().subscription || !equal(this.previousOptions.variables, this.getOptions().variables) || this.previousOptions.skip !== this.getOptions().skip)) {\n      this.cleanup();\n      currentResult = this.getLoadingResult();\n    }\n    this.initialize(this.getOptions());\n    this.startSubscription();\n    this.previousOptions = this.getOptions();\n    return __assign(__assign({}, currentResult), {\n      variables: this.getOptions().variables\n    });\n  };\n  SubscriptionData.prototype.afterExecute = function () {\n    this.isMounted = true;\n  };\n  SubscriptionData.prototype.cleanup = function () {\n    this.endSubscription();\n    delete this.currentObservable.query;\n  };\n  SubscriptionData.prototype.initialize = function (options) {\n    if (this.currentObservable.query || this.getOptions().skip === true) return;\n    this.currentObservable.query = this.refreshClient().client.subscribe({\n      query: options.subscription,\n      variables: options.variables,\n      fetchPolicy: options.fetchPolicy,\n      context: options.context\n    });\n  };\n  SubscriptionData.prototype.startSubscription = function () {\n    if (this.currentObservable.subscription) return;\n    this.currentObservable.subscription = this.currentObservable.query.subscribe({\n      next: this.updateCurrentData.bind(this),\n      error: this.updateError.bind(this),\n      complete: this.completeSubscription.bind(this)\n    });\n  };\n  SubscriptionData.prototype.getLoadingResult = function () {\n    return {\n      loading: true,\n      error: undefined,\n      data: undefined\n    };\n  };\n  SubscriptionData.prototype.updateResult = function (result) {\n    if (this.isMounted) {\n      this.setResult(result);\n    }\n  };\n  SubscriptionData.prototype.updateCurrentData = function (result) {\n    var onSubscriptionData = this.getOptions().onSubscriptionData;\n    this.updateResult({\n      data: result.data,\n      loading: false,\n      error: undefined\n    });\n    if (onSubscriptionData) {\n      onSubscriptionData({\n        client: this.refreshClient().client,\n        subscriptionData: result\n      });\n    }\n  };\n  SubscriptionData.prototype.updateError = function (error) {\n    this.updateResult({\n      error: error,\n      loading: false\n    });\n  };\n  SubscriptionData.prototype.completeSubscription = function () {\n    var _this = this;\n    Promise.resolve().then(function () {\n      var onSubscriptionComplete = _this.getOptions().onSubscriptionComplete;\n      if (onSubscriptionComplete) onSubscriptionComplete();\n      _this.endSubscription();\n    });\n  };\n  SubscriptionData.prototype.endSubscription = function () {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  };\n  return SubscriptionData;\n}(OperationData);\nexport { SubscriptionData };","map":{"version":3,"sources":["../../../src/react/data/SubscriptionData.ts"],"names":[],"mappings":"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","sourcesContent":["import { equal } from '@wry/equality';\n\nimport { OperationData } from './OperationData';\nimport {\n  SubscriptionCurrentObservable,\n  SubscriptionDataOptions,\n  SubscriptionResult\n} from '../types/types';\n\nexport class SubscriptionData<\n  TData = any,\n  TVariables = any\n> extends OperationData<SubscriptionDataOptions<TData, TVariables>> {\n  private setResult: any;\n  private currentObservable: SubscriptionCurrentObservable = {};\n\n  constructor({\n    options,\n    context,\n    setResult\n  }: {\n    options: SubscriptionDataOptions<TData, TVariables>;\n    context: any;\n    setResult: any;\n  }) {\n    super(options, context);\n    this.setResult = setResult;\n    this.initialize(options);\n  }\n\n  public execute(result: SubscriptionResult<TData>) {\n    if (this.getOptions().skip === true) {\n      this.cleanup();\n      return {\n        loading: false,\n        error: undefined,\n        data: undefined,\n        variables: this.getOptions().variables\n      };\n    }\n\n    let currentResult = result;\n    if (this.refreshClient().isNew) {\n      currentResult = this.getLoadingResult();\n    }\n\n    let { shouldResubscribe } = this.getOptions();\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(this.getOptions());\n    }\n\n    if (\n      shouldResubscribe !== false &&\n      this.previousOptions &&\n      Object.keys(this.previousOptions).length > 0 &&\n      (this.previousOptions.subscription !== this.getOptions().subscription ||\n        !equal(this.previousOptions.variables, this.getOptions().variables) ||\n        this.previousOptions.skip !== this.getOptions().skip)\n    ) {\n      this.cleanup();\n      currentResult = this.getLoadingResult();\n    }\n\n    this.initialize(this.getOptions());\n    this.startSubscription();\n\n    this.previousOptions = this.getOptions();\n    return { ...currentResult, variables: this.getOptions().variables };\n  }\n\n  public afterExecute() {\n    this.isMounted = true;\n  }\n\n  public cleanup() {\n    this.endSubscription();\n    delete this.currentObservable.query;\n  }\n\n  private initialize(options: SubscriptionDataOptions<TData, TVariables>) {\n    if (this.currentObservable.query || this.getOptions().skip === true) return;\n    this.currentObservable.query = this.refreshClient().client.subscribe({\n      query: options.subscription,\n      variables: options.variables,\n      fetchPolicy: options.fetchPolicy,\n      context: options.context,\n    });\n  }\n\n  private startSubscription() {\n    if (this.currentObservable.subscription) return;\n    this.currentObservable.subscription = this.currentObservable.query!.subscribe(\n      {\n        next: this.updateCurrentData.bind(this),\n        error: this.updateError.bind(this),\n        complete: this.completeSubscription.bind(this)\n      }\n    );\n  }\n\n  private getLoadingResult() {\n    return {\n      loading: true,\n      error: undefined,\n      data: undefined\n    } as SubscriptionResult<TData>;\n  }\n\n  private updateResult(result: SubscriptionResult) {\n    if (this.isMounted) {\n      this.setResult(result);\n    }\n  }\n\n  private updateCurrentData(result: SubscriptionResult<TData>) {\n    const { onSubscriptionData } = this.getOptions();\n\n    this.updateResult({\n      data: result.data,\n      loading: false,\n      error: undefined\n    });\n\n    if (onSubscriptionData) {\n      onSubscriptionData({\n        client: this.refreshClient().client,\n        subscriptionData: result\n      });\n    }\n  }\n\n  private updateError(error: any) {\n    this.updateResult({\n      error,\n      loading: false\n    });\n  }\n\n  private completeSubscription() {\n    // We have to defer this endSubscription call, because otherwise multiple\n    // subscriptions for the same component will cause infinite rendering.\n    // See https://github.com/apollographql/apollo-client/pull/7917\n    Promise.resolve().then(() => {\n      const { onSubscriptionComplete } = this.getOptions();\n      if (onSubscriptionComplete) onSubscriptionComplete();\n      this.endSubscription();\n    });\n  }\n\n  private endSubscription() {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}