{"ast":null,"code":"import { equal } from '@wry/equality';\nimport { invariant } from 'ts-invariant';\nimport { parser, operationName } from \"../parser/index.js\";\nvar OperationData = function () {\n  function OperationData(options, context) {\n    this.isMounted = false;\n    this.previousOptions = {};\n    this.context = {};\n    this.options = {};\n    this.options = options || {};\n    this.context = context || {};\n  }\n  OperationData.prototype.getOptions = function () {\n    return this.options;\n  };\n  OperationData.prototype.setOptions = function (newOptions, storePrevious) {\n    if (storePrevious === void 0) {\n      storePrevious = false;\n    }\n    if (storePrevious && !equal(this.options, newOptions)) {\n      this.previousOptions = this.options;\n    }\n    this.options = newOptions;\n  };\n  OperationData.prototype.unmount = function () {\n    this.isMounted = false;\n  };\n  OperationData.prototype.refreshClient = function () {\n    var client = this.options && this.options.client || this.context && this.context.client;\n    process.env.NODE_ENV === \"production\" ? invariant(!!client, 29) : invariant(!!client, 'Could not find \"client\" in the context or passed in as an option. ' + 'Wrap the root component in an <ApolloProvider>, or pass an ' + 'ApolloClient instance in via options.');\n    var isNew = false;\n    if (client !== this.client) {\n      isNew = true;\n      this.client = client;\n      this.cleanup();\n    }\n    return {\n      client: this.client,\n      isNew: isNew\n    };\n  };\n  OperationData.prototype.verifyDocumentType = function (document, type) {\n    var operation = parser(document);\n    var requiredOperationName = operationName(type);\n    var usedOperationName = operationName(operation.type);\n    process.env.NODE_ENV === \"production\" ? invariant(operation.type === type, 30) : invariant(operation.type === type, \"Running a \" + requiredOperationName + \" requires a graphql \" + (requiredOperationName + \", but a \" + usedOperationName + \" was used instead.\"));\n  };\n  return OperationData;\n}();\nexport { OperationData };","map":{"version":3,"sources":["../../../src/react/data/OperationData.ts"],"names":[],"mappings":"AACA,SAAS,KAAK,QAAQ,eAAe;AACrC,SAAS,SAAS,QAAQ,cAAc;AAGxC,SAAuB,MAAM,EAAE,aAAa,QAAQ,oBAAY;AAGhE,IAAA,aAAA,GAAA,YAAA;EAUE,SAAA,aAAA,CAAY,OAAiC,EAAE,OAAa,EAAA;IATrD,IAAA,CAAA,SAAS,GAAY,KAAK;IAC1B,IAAA,CAAA,eAAe,GAA4B,CAAA,CAEjD;IACM,IAAA,CAAA,OAAO,GAAQ,CAAA,CAAE;IAGhB,IAAA,CAAA,OAAO,GAA4B,CAAA,CAA6B;IAGtE,IAAI,CAAC,OAAO,GAAG,OAAO,IAAK,CAAA,CAA8B;IACzD,IAAI,CAAC,OAAO,GAAG,OAAO,IAAI,CAAA,CAAE;EAC9B;EAEO,aAAA,CAAA,SAAA,CAAA,UAAU,GAAjB,YAAA;IACE,OAAO,IAAI,CAAC,OAAO;EACrB,CAAC;EAEM,aAAA,CAAA,SAAA,CAAA,UAAU,GAAjB,UACE,UAAmC,EACnC,aAA8B,EAAA;IAA9B,IAAA,aAAA,KAAA,KAAA,CAAA,EAAA;MAAA,aAAA,GAAA,KAA8B;IAAA;IAE9B,IAAI,aAAa,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,UAAU,CAAC,EAAE;MACrD,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,OAAO;IACpC;IACD,IAAI,CAAC,OAAO,GAAG,UAAU;EAC3B,CAAC;EAMS,aAAA,CAAA,SAAA,CAAA,OAAO,GAAjB,YAAA;IACE,IAAI,CAAC,SAAS,GAAG,KAAK;EACxB,CAAC;EAES,aAAA,CAAA,SAAA,CAAA,aAAa,GAAvB,YAAA;IACE,IAAM,MAAM,GACT,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,IACnC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,MAAO;IAEvC,OAAA,CAAA,GACG,CAAC,QACF,KAAA,YAAA,GAAA,SAAA,CAAA,CAAA,CAAA,MAAA,EAAA,EAAA,CAAA,GAAA,SAAA,CAAA,CAAA,CAAA,MAAA,EAAA,oEAAoE,GAClE,6DAA6D,GAC7D,uCAAuC,CAC1C;IAED,IAAI,KAAK,GAAG,KAAK;IACjB,IAAI,MAAM,KAAK,IAAI,CAAC,MAAM,EAAE;MAC1B,KAAK,GAAG,IAAI;MACZ,IAAI,CAAC,MAAM,GAAG,MAAM;MACpB,IAAI,CAAC,OAAO,EAAE;IACf;IACD,OAAO;MACL,MAAM,EAAE,IAAI,CAAC,MAA8B;MAC3C,KAAK,EAAA;KACN;EACH,CAAC;EAES,aAAA,CAAA,SAAA,CAAA,kBAAkB,GAA5B,UAA6B,QAAsB,EAAE,IAAkB,EAAA;IACrE,IAAM,SAAS,GAAG,MAAM,CAAC,QAAQ,CAAC;IAClC,IAAM,qBAAqB,GAAG,aAAa,CAAC,IAAI,CAAC;IACjD,IAAM,iBAAiB,GAAG,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC;IACvD,OAAA,CAAA,GACE,CAAA,QAAU,KAAI,YACd,GAAA,SAAA,CAAa,SAAA,CAAA,IAAA,KAAA,IAAqB,EAAA,EAAA,CAAA,GAAA,SAAA,CAAA,SAAsB,CAAA,IAAA,KAAA,IAAA,EAAA,YAAA,GAAA,qBAAA,GAAA,sBAAA,IACnD,qBAAqB,GAAA,UAAA,GAAW,iBAAiB,GAAA,oBAAoB,CAAA,CAC3E;EACH,CAAC;EACH,OAAA,aAAC;AAAD,CAAC,EAAA","sourcesContent":["import { DocumentNode } from 'graphql';\nimport { equal } from '@wry/equality';\nimport { invariant } from 'ts-invariant';\n\nimport { ApolloClient } from '../../core';\nimport { DocumentType, parser, operationName } from '../parser';\nimport { CommonOptions } from '../types/types';\n\nexport abstract class OperationData<TOptions = any> {\n  public isMounted: boolean = false;\n  public previousOptions: CommonOptions<TOptions> = {} as CommonOptions<\n    TOptions\n  >;\n  public context: any = {};\n  public client: ApolloClient<object>;\n\n  private options: CommonOptions<TOptions> = {} as CommonOptions<TOptions>;\n\n  constructor(options?: CommonOptions<TOptions>, context?: any) {\n    this.options = options || ({} as CommonOptions<TOptions>);\n    this.context = context || {};\n  }\n\n  public getOptions(): CommonOptions<TOptions> {\n    return this.options;\n  }\n\n  public setOptions(\n    newOptions: CommonOptions<TOptions>,\n    storePrevious: boolean = false\n  ) {\n    if (storePrevious && !equal(this.options, newOptions)) {\n      this.previousOptions = this.options;\n    }\n    this.options = newOptions;\n  }\n\n  public abstract execute(...args: any): any;\n  public abstract afterExecute(...args: any): void | (() => void);\n  public abstract cleanup(): void;\n\n  protected unmount() {\n    this.isMounted = false;\n  }\n\n  protected refreshClient() {\n    const client =\n      (this.options && this.options.client) ||\n      (this.context && this.context.client);\n\n    invariant(\n      !!client,\n      'Could not find \"client\" in the context or passed in as an option. ' +\n        'Wrap the root component in an <ApolloProvider>, or pass an ' +\n        'ApolloClient instance in via options.'\n    );\n\n    let isNew = false;\n    if (client !== this.client) {\n      isNew = true;\n      this.client = client;\n      this.cleanup();\n    }\n    return {\n      client: this.client as ApolloClient<object>,\n      isNew\n    };\n  }\n\n  protected verifyDocumentType(document: DocumentNode, type: DocumentType) {\n    const operation = parser(document);\n    const requiredOperationName = operationName(type);\n    const usedOperationName = operationName(operation.type);\n    invariant(\n      operation.type === type,\n      `Running a ${requiredOperationName} requires a graphql ` +\n        `${requiredOperationName}, but a ${usedOperationName} was used instead.`\n    );\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}