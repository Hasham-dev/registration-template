{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { isNonEmptyArray } from \"../utilities/index.js\";\nexport function isApolloError(err) {\n  return err.hasOwnProperty('graphQLErrors');\n}\nvar generateErrorMessage = function generateErrorMessage(err) {\n  var message = '';\n  if (isNonEmptyArray(err.graphQLErrors)) {\n    err.graphQLErrors.forEach(function (graphQLError) {\n      var errorMessage = graphQLError ? graphQLError.message : 'Error message not found.';\n      message += errorMessage + \"\\n\";\n    });\n  }\n  if (err.networkError) {\n    message += err.networkError.message + \"\\n\";\n  }\n  message = message.replace(/\\n$/, '');\n  return message;\n};\nvar ApolloError = function (_super) {\n  __extends(ApolloError, _super);\n  function ApolloError(_a) {\n    var graphQLErrors = _a.graphQLErrors,\n      networkError = _a.networkError,\n      errorMessage = _a.errorMessage,\n      extraInfo = _a.extraInfo;\n    var _this = _super.call(this, errorMessage) || this;\n    _this.graphQLErrors = graphQLErrors || [];\n    _this.networkError = networkError || null;\n    _this.message = errorMessage || generateErrorMessage(_this);\n    _this.extraInfo = extraInfo;\n    _this.__proto__ = ApolloError.prototype;\n    return _this;\n  }\n  return ApolloError;\n}(Error);\nexport { ApolloError };","map":{"version":3,"sources":["../../src/errors/index.ts"],"names":[],"mappings":";AAEA,SAAS,eAAe,QAAQ,uBAAe;AAI/C,OAAM,SAAU,aAAa,CAAC,GAAU,EAAA;EACtC,OAAO,GAAG,CAAC,cAAc,CAAC,eAAe,CAAC;AAC5C;AAMA,IAAM,oBAAoB,GAAG,SAAvB,oBAAoB,CAAI,GAAgB,EAAA;EAC5C,IAAI,OAAO,GAAG,EAAE;EAEhB,IAAI,eAAe,CAAC,GAAG,CAAC,aAAa,CAAC,EAAE;IACtC,GAAG,CAAC,aAAa,CAAC,OAAO,CAAC,UAAC,YAA0B,EAAA;MACnD,IAAM,YAAY,GAAG,YAAY,GAC7B,YAAY,CAAC,OAAO,GACpB,0BAA0B;MAC9B,OAAO,IAAO,YAAY,GAAA,IAAI;IAChC,CAAC,CAAC;EACH;EAED,IAAI,GAAG,CAAC,YAAY,EAAE;IACpB,OAAO,IAAO,GAAG,CAAC,YAAY,CAAC,OAAO,GAAA,IAAI;EAC3C;EAGD,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;EACpC,OAAO,OAAO;AAChB,CAAC;AAED,IAAA,WAAA,GAAA,UAAA,MAAA,EAAA;EAAiC,SAAA,CAAA,WAAA,EAAA,MAAA,CAAA;EAa/B,SAAA,WAAA,CAAY,EAUX,EAAA;QATC,aAAa,GAAA,EAAA,CAAA,aAAA;MACb,YAAY,GAAA,EAAA,CAAA,YAAA;MACZ,YAAY,GAAA,EAAA,CAAA,YAAA;MACZ,SAAS,GAAA,EAAA,CAAA,SAAA;IAJX,IAAA,KAAA,GAWE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,YAAY,CAAC,IAAA,IAAA;IACnB,KAAI,CAAC,aAAa,GAAG,aAAa,IAAI,EAAE;IACxC,KAAI,CAAC,YAAY,GAAG,YAAY,IAAI,IAAI;IACxC,KAAI,CAAC,OAAO,GAAG,YAAY,IAAI,oBAAoB,CAAC,KAAI,CAAC;IACzD,KAAI,CAAC,SAAS,GAAG,SAAS;IAIzB,KAAY,CAAC,SAAS,GAAG,WAAW,CAAC,SAAS;;EACjD;EACF,OAAA,WAAC;AAAD,CAAC,CAlCgC,KAAK,CAAA","sourcesContent":["import { GraphQLError } from 'graphql';\n\nimport { isNonEmptyArray } from '../utilities';\nimport { ServerParseError } from '../link/http';\nimport { ServerError } from '../link/utils';\n\nexport function isApolloError(err: Error): err is ApolloError {\n  return err.hasOwnProperty('graphQLErrors');\n}\n\n// Sets the error message on this error according to the\n// the GraphQL and network errors that are present.\n// If the error message has already been set through the\n// constructor or otherwise, this function is a nop.\nconst generateErrorMessage = (err: ApolloError) => {\n  let message = '';\n  // If we have GraphQL errors present, add that to the error message.\n  if (isNonEmptyArray(err.graphQLErrors)) {\n    err.graphQLErrors.forEach((graphQLError: GraphQLError) => {\n      const errorMessage = graphQLError\n        ? graphQLError.message\n        : 'Error message not found.';\n      message += `${errorMessage}\\n`;\n    });\n  }\n\n  if (err.networkError) {\n    message += `${err.networkError.message}\\n`;\n  }\n\n  // strip newline from the end of the message\n  message = message.replace(/\\n$/, '');\n  return message;\n};\n\nexport class ApolloError extends Error {\n  public message: string;\n  public graphQLErrors: ReadonlyArray<GraphQLError>;\n  public networkError: Error | ServerParseError | ServerError | null;\n\n  // An object that can be used to provide some additional information\n  // about an error, e.g. specifying the type of error this is. Used\n  // internally within Apollo Client.\n  public extraInfo: any;\n\n  // Constructs an instance of ApolloError given a GraphQLError\n  // or a network error. Note that one of these has to be a valid\n  // value or the constructed error will be meaningless.\n  constructor({\n    graphQLErrors,\n    networkError,\n    errorMessage,\n    extraInfo,\n  }: {\n    graphQLErrors?: ReadonlyArray<GraphQLError>;\n    networkError?: Error | ServerParseError | ServerError | null;\n    errorMessage?: string;\n    extraInfo?: any;\n  }) {\n    super(errorMessage);\n    this.graphQLErrors = graphQLErrors || [];\n    this.networkError = networkError || null;\n    this.message = errorMessage || generateErrorMessage(this);\n    this.extraInfo = extraInfo;\n\n    // We're not using `Object.setPrototypeOf` here as it isn't fully\n    // supported on Android (see issue #3236).\n    (this as any).__proto__ = ApolloError.prototype;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}