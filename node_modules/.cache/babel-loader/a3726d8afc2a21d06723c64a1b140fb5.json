{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { visit } from 'graphql';\nimport { ApolloLink } from \"../core/index.js\";\nimport { Observable } from \"../../utilities/index.js\";\nimport { serializeFetchParameter } from \"./serializeFetchParameter.js\";\nimport { selectURI } from \"./selectURI.js\";\nimport { parseAndCheckHttpResponse } from \"./parseAndCheckHttpResponse.js\";\nimport { checkFetcher } from \"./checkFetcher.js\";\nimport { selectHttpOptionsAndBody, fallbackHttpConfig } from \"./selectHttpOptionsAndBody.js\";\nimport { createSignalIfSupported } from \"./createSignalIfSupported.js\";\nimport { rewriteURIForGET } from \"./rewriteURIForGET.js\";\nimport { fromError } from \"../utils/index.js\";\nexport var createHttpLink = function createHttpLink(linkOptions) {\n  if (linkOptions === void 0) {\n    linkOptions = {};\n  }\n  var _a = linkOptions.uri,\n    uri = _a === void 0 ? '/graphql' : _a,\n    fetcher = linkOptions.fetch,\n    includeExtensions = linkOptions.includeExtensions,\n    useGETForQueries = linkOptions.useGETForQueries,\n    _b = linkOptions.includeUnusedVariables,\n    includeUnusedVariables = _b === void 0 ? false : _b,\n    requestOptions = __rest(linkOptions, [\"uri\", \"fetch\", \"includeExtensions\", \"useGETForQueries\", \"includeUnusedVariables\"]);\n  checkFetcher(fetcher);\n  if (!fetcher) {\n    fetcher = fetch;\n  }\n  var linkConfig = {\n    http: {\n      includeExtensions: includeExtensions\n    },\n    options: requestOptions.fetchOptions,\n    credentials: requestOptions.credentials,\n    headers: requestOptions.headers\n  };\n  return new ApolloLink(function (operation) {\n    var chosenURI = selectURI(operation, uri);\n    var context = operation.getContext();\n    var clientAwarenessHeaders = {};\n    if (context.clientAwareness) {\n      var _a = context.clientAwareness,\n        name_1 = _a.name,\n        version = _a.version;\n      if (name_1) {\n        clientAwarenessHeaders['apollographql-client-name'] = name_1;\n      }\n      if (version) {\n        clientAwarenessHeaders['apollographql-client-version'] = version;\n      }\n    }\n    var contextHeaders = __assign(__assign({}, clientAwarenessHeaders), context.headers);\n    var contextConfig = {\n      http: context.http,\n      options: context.fetchOptions,\n      credentials: context.credentials,\n      headers: contextHeaders\n    };\n    var _b = selectHttpOptionsAndBody(operation, fallbackHttpConfig, linkConfig, contextConfig),\n      options = _b.options,\n      body = _b.body;\n    if (body.variables && !includeUnusedVariables) {\n      var unusedNames_1 = new Set(Object.keys(body.variables));\n      visit(operation.query, {\n        Variable: function Variable(node, _key, parent) {\n          if (parent && parent.kind !== 'VariableDefinition') {\n            unusedNames_1.delete(node.name.value);\n          }\n        }\n      });\n      if (unusedNames_1.size) {\n        body.variables = __assign({}, body.variables);\n        unusedNames_1.forEach(function (name) {\n          delete body.variables[name];\n        });\n      }\n    }\n    var controller;\n    if (!options.signal) {\n      var _c = createSignalIfSupported(),\n        _controller = _c.controller,\n        signal = _c.signal;\n      controller = _controller;\n      if (controller) options.signal = signal;\n    }\n    var definitionIsMutation = function definitionIsMutation(d) {\n      return d.kind === 'OperationDefinition' && d.operation === 'mutation';\n    };\n    if (useGETForQueries && !operation.query.definitions.some(definitionIsMutation)) {\n      options.method = 'GET';\n    }\n    if (options.method === 'GET') {\n      var _d = rewriteURIForGET(chosenURI, body),\n        newURI = _d.newURI,\n        parseError = _d.parseError;\n      if (parseError) {\n        return fromError(parseError);\n      }\n      chosenURI = newURI;\n    } else {\n      try {\n        options.body = serializeFetchParameter(body, 'Payload');\n      } catch (parseError) {\n        return fromError(parseError);\n      }\n    }\n    return new Observable(function (observer) {\n      fetcher(chosenURI, options).then(function (response) {\n        operation.setContext({\n          response: response\n        });\n        return response;\n      }).then(parseAndCheckHttpResponse(operation)).then(function (result) {\n        observer.next(result);\n        observer.complete();\n        return result;\n      }).catch(function (err) {\n        if (err.name === 'AbortError') return;\n        if (err.result && err.result.errors && err.result.data) {\n          observer.next(err.result);\n        }\n        observer.error(err);\n      });\n      return function () {\n        if (controller) controller.abort();\n      };\n    });\n  });\n};","map":{"version":3,"sources":["../../../src/link/http/createHttpLink.ts"],"names":[],"mappings":"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","sourcesContent":["import { visit, DefinitionNode, VariableDefinitionNode } from 'graphql';\n\nimport { ApolloLink } from '../core';\nimport { Observable } from '../../utilities';\nimport { serializeFetchParameter } from './serializeFetchParameter';\nimport { selectURI } from './selectURI';\nimport { parseAndCheckHttpResponse } from './parseAndCheckHttpResponse';\nimport { checkFetcher } from './checkFetcher';\nimport {\n  selectHttpOptionsAndBody,\n  fallbackHttpConfig,\n  HttpOptions\n} from './selectHttpOptionsAndBody';\nimport { createSignalIfSupported } from './createSignalIfSupported';\nimport { rewriteURIForGET } from './rewriteURIForGET';\nimport { fromError } from '../utils';\n\nexport const createHttpLink = (linkOptions: HttpOptions = {}) => {\n  let {\n    uri = '/graphql',\n    // use default global fetch if nothing passed in\n    fetch: fetcher,\n    includeExtensions,\n    useGETForQueries,\n    includeUnusedVariables = false,\n    ...requestOptions\n  } = linkOptions;\n\n  // dev warnings to ensure fetch is present\n  checkFetcher(fetcher);\n\n  //fetcher is set here rather than the destructuring to ensure fetch is\n  //declared before referencing it. Reference in the destructuring would cause\n  //a ReferenceError\n  if (!fetcher) {\n    fetcher = fetch;\n  }\n\n  const linkConfig = {\n    http: { includeExtensions },\n    options: requestOptions.fetchOptions,\n    credentials: requestOptions.credentials,\n    headers: requestOptions.headers,\n  };\n\n  return new ApolloLink(operation => {\n    let chosenURI = selectURI(operation, uri);\n\n    const context = operation.getContext();\n\n    // `apollographql-client-*` headers are automatically set if a\n    // `clientAwareness` object is found in the context. These headers are\n    // set first, followed by the rest of the headers pulled from\n    // `context.headers`. If desired, `apollographql-client-*` headers set by\n    // the `clientAwareness` object can be overridden by\n    // `apollographql-client-*` headers set in `context.headers`.\n    const clientAwarenessHeaders: {\n      'apollographql-client-name'?: string;\n      'apollographql-client-version'?: string;\n    } = {};\n\n    if (context.clientAwareness) {\n      const { name, version } = context.clientAwareness;\n      if (name) {\n        clientAwarenessHeaders['apollographql-client-name'] = name;\n      }\n      if (version) {\n        clientAwarenessHeaders['apollographql-client-version'] = version;\n      }\n    }\n\n    const contextHeaders = { ...clientAwarenessHeaders, ...context.headers };\n\n    const contextConfig = {\n      http: context.http,\n      options: context.fetchOptions,\n      credentials: context.credentials,\n      headers: contextHeaders,\n    };\n\n    //uses fallback, link, and then context to build options\n    const { options, body } = selectHttpOptionsAndBody(\n      operation,\n      fallbackHttpConfig,\n      linkConfig,\n      contextConfig,\n    );\n\n    if (body.variables && !includeUnusedVariables) {\n      const unusedNames = new Set(Object.keys(body.variables));\n      visit(operation.query, {\n        Variable(node, _key, parent) {\n          // A variable type definition at the top level of a query is not\n          // enough to silence server-side errors about the variable being\n          // unused, so variable definitions do not count as usage.\n          // https://spec.graphql.org/draft/#sec-All-Variables-Used\n          if (parent && (parent as VariableDefinitionNode).kind !== 'VariableDefinition') {\n            unusedNames.delete(node.name.value);\n          }\n        },\n      });\n      if (unusedNames.size) {\n        // Make a shallow copy of body.variables (with keys in the same\n        // order) and then delete unused variables from the copy.\n        body.variables = { ...body.variables };\n        unusedNames.forEach(name => {\n          delete body.variables![name];\n        });\n      }\n    }\n\n    let controller: any;\n    if (!(options as any).signal) {\n      const { controller: _controller, signal } = createSignalIfSupported();\n      controller = _controller;\n      if (controller) (options as any).signal = signal;\n    }\n\n    // If requested, set method to GET if there are no mutations.\n    const definitionIsMutation = (d: DefinitionNode) => {\n      return d.kind === 'OperationDefinition' && d.operation === 'mutation';\n    };\n    if (\n      useGETForQueries &&\n      !operation.query.definitions.some(definitionIsMutation)\n    ) {\n      options.method = 'GET';\n    }\n\n    if (options.method === 'GET') {\n      const { newURI, parseError } = rewriteURIForGET(chosenURI, body);\n      if (parseError) {\n        return fromError(parseError);\n      }\n      chosenURI = newURI;\n    } else {\n      try {\n        (options as any).body = serializeFetchParameter(body, 'Payload');\n      } catch (parseError) {\n        return fromError(parseError);\n      }\n    }\n\n    return new Observable(observer => {\n      fetcher!(chosenURI, options)\n        .then(response => {\n          operation.setContext({ response });\n          return response;\n        })\n        .then(parseAndCheckHttpResponse(operation))\n        .then(result => {\n          // we have data and can send it to back up the link chain\n          observer.next(result);\n          observer.complete();\n          return result;\n        })\n        .catch(err => {\n          // fetch was cancelled so it's already been cleaned up in the unsubscribe\n          if (err.name === 'AbortError') return;\n          // if it is a network error, BUT there is graphql result info\n          // fire the next observer before calling error\n          // this gives apollo-client (and react-apollo) the `graphqlErrors` and `networErrors`\n          // to pass to UI\n          // this should only happen if we *also* have data as part of the response key per\n          // the spec\n          if (err.result && err.result.errors && err.result.data) {\n            // if we don't call next, the UI can only show networkError because AC didn't\n            // get any graphqlErrors\n            // this is graphql execution result info (i.e errors and possibly data)\n            // this is because there is no formal spec how errors should translate to\n            // http status codes. So an auth error (401) could have both data\n            // from a public field, errors from a private field, and a status of 401\n            // {\n            //  user { // this will have errors\n            //    firstName\n            //  }\n            //  products { // this is public so will have data\n            //    cost\n            //  }\n            // }\n            //\n            // the result of above *could* look like this:\n            // {\n            //   data: { products: [{ cost: \"$10\" }] },\n            //   errors: [{\n            //      message: 'your session has timed out',\n            //      path: []\n            //   }]\n            // }\n            // status code of above would be a 401\n            // in the UI you want to show data where you can, errors as data where you can\n            // and use correct http status codes\n            observer.next(err.result);\n          }\n          observer.error(err);\n        });\n\n      return () => {\n        // XXX support canceling this request\n        // https://developers.google.com/web/updates/2017/09/abortable-fetch\n        if (controller) controller.abort();\n      };\n    });\n  });\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}