{"ast":null,"code":"import { visit } from 'graphql';\nimport { invariant } from 'ts-invariant';\nexport function shouldInclude(_a, variables) {\n  var directives = _a.directives;\n  if (!directives || !directives.length) {\n    return true;\n  }\n  return getInclusionDirectives(directives).every(function (_a) {\n    var directive = _a.directive,\n      ifArgument = _a.ifArgument;\n    var evaledValue = false;\n    if (ifArgument.value.kind === 'Variable') {\n      evaledValue = variables && variables[ifArgument.value.name.value];\n      process.env.NODE_ENV === \"production\" ? invariant(evaledValue !== void 0, 38) : invariant(evaledValue !== void 0, \"Invalid variable referenced in @\" + directive.name.value + \" directive.\");\n    } else {\n      evaledValue = ifArgument.value.value;\n    }\n    return directive.name.value === 'skip' ? !evaledValue : evaledValue;\n  });\n}\nexport function getDirectiveNames(root) {\n  var names = [];\n  visit(root, {\n    Directive: function Directive(node) {\n      names.push(node.name.value);\n    }\n  });\n  return names;\n}\nexport function hasDirectives(names, root) {\n  return getDirectiveNames(root).some(function (name) {\n    return names.indexOf(name) > -1;\n  });\n}\nexport function hasClientExports(document) {\n  return document && hasDirectives(['client'], document) && hasDirectives(['export'], document);\n}\nfunction isInclusionDirective(_a) {\n  var value = _a.name.value;\n  return value === 'skip' || value === 'include';\n}\nexport function getInclusionDirectives(directives) {\n  var result = [];\n  if (directives && directives.length) {\n    directives.forEach(function (directive) {\n      if (!isInclusionDirective(directive)) return;\n      var directiveArguments = directive.arguments;\n      var directiveName = directive.name.value;\n      process.env.NODE_ENV === \"production\" ? invariant(directiveArguments && directiveArguments.length === 1, 39) : invariant(directiveArguments && directiveArguments.length === 1, \"Incorrect number of arguments for the @\" + directiveName + \" directive.\");\n      var ifArgument = directiveArguments[0];\n      process.env.NODE_ENV === \"production\" ? invariant(ifArgument.name && ifArgument.name.value === 'if', 40) : invariant(ifArgument.name && ifArgument.name.value === 'if', \"Invalid argument for the @\" + directiveName + \" directive.\");\n      var ifValue = ifArgument.value;\n      process.env.NODE_ENV === \"production\" ? invariant(ifValue && (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'), 41) : invariant(ifValue && (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'), \"Argument for the @\" + directiveName + \" directive must be a variable or a boolean value.\");\n      result.push({\n        directive: directive,\n        ifArgument: ifArgument\n      });\n    });\n  }\n  return result;\n}","map":{"version":3,"sources":["../../../src/utilities/graphql/directives.ts"],"names":[],"mappings":"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","sourcesContent":["// Provides the methods that allow QueryManager to handle the `skip` and\n// `include` directives within GraphQL.\nimport {\n  SelectionNode,\n  VariableNode,\n  BooleanValueNode,\n  DirectiveNode,\n  DocumentNode,\n  ArgumentNode,\n  ValueNode,\n  ASTNode,\n  visit,\n} from 'graphql';\n\nimport { invariant } from 'ts-invariant';\n\nexport type DirectiveInfo = {\n  [fieldName: string]: { [argName: string]: any };\n};\n\nexport function shouldInclude(\n  { directives }: SelectionNode,\n  variables?: Record<string, any>,\n): boolean {\n  if (!directives || !directives.length) {\n    return true;\n  }\n  return getInclusionDirectives(\n    directives\n  ).every(({ directive, ifArgument }) => {\n    let evaledValue: boolean = false;\n    if (ifArgument.value.kind === 'Variable') {\n      evaledValue = variables && variables[(ifArgument.value as VariableNode).name.value];\n      invariant(\n        evaledValue !== void 0,\n        `Invalid variable referenced in @${directive.name.value} directive.`,\n      );\n    } else {\n      evaledValue = (ifArgument.value as BooleanValueNode).value;\n    }\n    return directive.name.value === 'skip' ? !evaledValue : evaledValue;\n  });\n}\n\nexport function getDirectiveNames(root: ASTNode) {\n  const names: string[] = [];\n\n  visit(root, {\n    Directive(node: DirectiveNode) {\n      names.push(node.name.value);\n    },\n  });\n\n  return names;\n}\n\nexport function hasDirectives(names: string[], root: ASTNode) {\n  return getDirectiveNames(root).some(\n    (name: string) => names.indexOf(name) > -1,\n  );\n}\n\nexport function hasClientExports(document: DocumentNode) {\n  return (\n    document &&\n    hasDirectives(['client'], document) &&\n    hasDirectives(['export'], document)\n  );\n}\n\nexport type InclusionDirectives = Array<{\n  directive: DirectiveNode;\n  ifArgument: ArgumentNode;\n}>;\n\nfunction isInclusionDirective({ name: { value } }: DirectiveNode): boolean {\n  return value === 'skip' || value === 'include';\n}\n\nexport function getInclusionDirectives(\n  directives: ReadonlyArray<DirectiveNode>,\n): InclusionDirectives {\n  const result: InclusionDirectives = [];\n\n  if (directives && directives.length) {\n    directives.forEach(directive => {\n      if (!isInclusionDirective(directive)) return;\n\n      const directiveArguments = directive.arguments;\n      const directiveName = directive.name.value;\n\n      invariant(\n        directiveArguments && directiveArguments.length === 1,\n        `Incorrect number of arguments for the @${directiveName} directive.`,\n      );\n\n      const ifArgument = directiveArguments![0];\n      invariant(\n        ifArgument.name && ifArgument.name.value === 'if',\n        `Invalid argument for the @${directiveName} directive.`,\n      );\n\n      const ifValue: ValueNode = ifArgument.value;\n\n      // means it has to be a variable value if this is a valid @skip or @include directive\n      invariant(\n        ifValue &&\n          (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'),\n        `Argument for the @${directiveName} directive must be a variable or a boolean value.`,\n      );\n\n      result.push({ directive, ifArgument });\n    });\n  }\n\n  return result;\n}\n\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}