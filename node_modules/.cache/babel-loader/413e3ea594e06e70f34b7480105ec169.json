{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { equal } from '@wry/equality';\nimport { ApolloError } from \"../../errors/index.js\";\nimport { NetworkStatus } from \"../../core/index.js\";\nimport { DocumentType } from \"../parser/index.js\";\nimport { OperationData } from \"./OperationData.js\";\nvar QueryData = function (_super) {\n  __extends(QueryData, _super);\n  function QueryData(_a) {\n    var options = _a.options,\n      context = _a.context,\n      onNewData = _a.onNewData;\n    var _this = _super.call(this, options, context) || this;\n    _this.runLazy = false;\n    _this.previous = Object.create(null);\n    _this.runLazyQuery = function (options) {\n      _this.cleanup();\n      _this.runLazy = true;\n      _this.lazyOptions = options;\n      _this.onNewData();\n    };\n    _this.getQueryResult = function () {\n      var result = _this.observableQueryFields();\n      var options = _this.getOptions();\n      if (options.skip) {\n        result = __assign(__assign({}, result), {\n          data: undefined,\n          error: undefined,\n          loading: false,\n          networkStatus: NetworkStatus.ready,\n          called: true\n        });\n      } else if (_this.currentObservable) {\n        var currentResult = _this.currentObservable.getCurrentResult();\n        var data = currentResult.data,\n          loading = currentResult.loading,\n          partial = currentResult.partial,\n          networkStatus = currentResult.networkStatus,\n          errors = currentResult.errors;\n        var error = currentResult.error;\n        if (errors && errors.length > 0) {\n          error = new ApolloError({\n            graphQLErrors: errors\n          });\n        }\n        result = __assign(__assign({}, result), {\n          data: data,\n          loading: loading,\n          networkStatus: networkStatus,\n          error: error,\n          called: true\n        });\n        if (loading) {} else if (error) {\n          Object.assign(result, {\n            data: (_this.currentObservable.getLastResult() || {}).data\n          });\n        } else {\n          var fetchPolicy = _this.currentObservable.options.fetchPolicy;\n          var partialRefetch = options.partialRefetch;\n          if (partialRefetch && partial && (!data || Object.keys(data).length === 0) && fetchPolicy !== 'cache-only') {\n            Object.assign(result, {\n              loading: true,\n              networkStatus: NetworkStatus.loading\n            });\n            result.refetch();\n            return result;\n          }\n        }\n      }\n      result.client = _this.client;\n      _this.setOptions(options, true);\n      var previousResult = _this.previous.result;\n      _this.previous.loading = previousResult && previousResult.loading || false;\n      result.previousData = previousResult && (previousResult.data || previousResult.previousData);\n      _this.previous.result = result;\n      _this.currentObservable && _this.currentObservable.resetQueryStoreErrors();\n      return result;\n    };\n    _this.obsRefetch = function (variables) {\n      var _a;\n      return (_a = _this.currentObservable) === null || _a === void 0 ? void 0 : _a.refetch(variables);\n    };\n    _this.obsFetchMore = function (fetchMoreOptions) {\n      return _this.currentObservable.fetchMore(fetchMoreOptions);\n    };\n    _this.obsUpdateQuery = function (mapFn) {\n      return _this.currentObservable.updateQuery(mapFn);\n    };\n    _this.obsStartPolling = function (pollInterval) {\n      var _a;\n      (_a = _this.currentObservable) === null || _a === void 0 ? void 0 : _a.startPolling(pollInterval);\n    };\n    _this.obsStopPolling = function () {\n      var _a;\n      (_a = _this.currentObservable) === null || _a === void 0 ? void 0 : _a.stopPolling();\n    };\n    _this.obsSubscribeToMore = function (options) {\n      return _this.currentObservable.subscribeToMore(options);\n    };\n    _this.onNewData = onNewData;\n    return _this;\n  }\n  QueryData.prototype.execute = function () {\n    this.refreshClient();\n    var _a = this.getOptions(),\n      skip = _a.skip,\n      query = _a.query;\n    if (skip || query !== this.previous.query) {\n      this.removeQuerySubscription();\n      this.removeObservable(!skip);\n      this.previous.query = query;\n    }\n    this.updateObservableQuery();\n    if (this.isMounted) this.startQuerySubscription();\n    return this.getExecuteSsrResult() || this.getExecuteResult();\n  };\n  QueryData.prototype.executeLazy = function () {\n    return !this.runLazy ? [this.runLazyQuery, {\n      loading: false,\n      networkStatus: NetworkStatus.ready,\n      called: false,\n      data: undefined\n    }] : [this.runLazyQuery, this.execute()];\n  };\n  QueryData.prototype.fetchData = function () {\n    var _this = this;\n    var options = this.getOptions();\n    if (options.skip || options.ssr === false) return false;\n    return new Promise(function (resolve) {\n      return _this.startQuerySubscription(resolve);\n    });\n  };\n  QueryData.prototype.afterExecute = function (_a) {\n    var _b = (_a === void 0 ? {} : _a).lazy,\n      lazy = _b === void 0 ? false : _b;\n    this.isMounted = true;\n    if (!lazy || this.runLazy) {\n      this.handleErrorOrCompleted();\n    }\n    this.previousOptions = this.getOptions();\n    return this.unmount.bind(this);\n  };\n  QueryData.prototype.cleanup = function () {\n    this.removeQuerySubscription();\n    this.removeObservable(true);\n    delete this.previous.result;\n  };\n  QueryData.prototype.getOptions = function () {\n    var options = _super.prototype.getOptions.call(this);\n    if (this.lazyOptions) {\n      options.variables = __assign(__assign({}, options.variables), this.lazyOptions.variables);\n      options.context = __assign(__assign({}, options.context), this.lazyOptions.context);\n    }\n    if (this.runLazy) {\n      delete options.skip;\n    }\n    return options;\n  };\n  QueryData.prototype.ssrInitiated = function () {\n    return this.context && this.context.renderPromises;\n  };\n  QueryData.prototype.getExecuteResult = function () {\n    var result = this.getQueryResult();\n    this.startQuerySubscription();\n    return result;\n  };\n  ;\n  QueryData.prototype.getExecuteSsrResult = function () {\n    var _a = this.getOptions(),\n      ssr = _a.ssr,\n      skip = _a.skip;\n    var ssrDisabled = ssr === false;\n    var fetchDisabled = this.refreshClient().client.disableNetworkFetches;\n    var ssrLoading = __assign({\n      loading: true,\n      networkStatus: NetworkStatus.loading,\n      called: true,\n      data: undefined,\n      stale: false,\n      client: this.client\n    }, this.observableQueryFields());\n    if (ssrDisabled && (this.ssrInitiated() || fetchDisabled)) {\n      this.previous.result = ssrLoading;\n      return ssrLoading;\n    }\n    var result;\n    if (this.ssrInitiated()) {\n      if (skip) {\n        result = this.getQueryResult();\n      } else {\n        result = this.context.renderPromises.addQueryPromise(this, this.getQueryResult) || ssrLoading;\n      }\n      ;\n    }\n    return result;\n  };\n  QueryData.prototype.prepareObservableQueryOptions = function () {\n    var options = this.getOptions();\n    this.verifyDocumentType(options.query, DocumentType.Query);\n    var displayName = options.displayName || 'Query';\n    if (this.ssrInitiated() && (options.fetchPolicy === 'network-only' || options.fetchPolicy === 'cache-and-network')) {\n      options.fetchPolicy = 'cache-first';\n    }\n    return __assign(__assign({}, options), {\n      displayName: displayName,\n      context: options.context\n    });\n  };\n  QueryData.prototype.initializeObservableQuery = function () {\n    if (this.ssrInitiated()) {\n      this.currentObservable = this.context.renderPromises.getSSRObservable(this.getOptions());\n    }\n    if (!this.currentObservable) {\n      var observableQueryOptions = this.prepareObservableQueryOptions();\n      this.previous.observableQueryOptions = __assign(__assign({}, observableQueryOptions), {\n        children: null\n      });\n      this.currentObservable = this.refreshClient().client.watchQuery(__assign({}, observableQueryOptions));\n      if (this.ssrInitiated()) {\n        this.context.renderPromises.registerSSRObservable(this.currentObservable, observableQueryOptions);\n      }\n    }\n  };\n  QueryData.prototype.updateObservableQuery = function () {\n    if (!this.currentObservable) {\n      this.initializeObservableQuery();\n      return;\n    }\n    if (this.getOptions().skip) return;\n    var newObservableQueryOptions = __assign(__assign({}, this.prepareObservableQueryOptions()), {\n      children: null\n    });\n    if (!equal(newObservableQueryOptions, this.previous.observableQueryOptions)) {\n      this.previous.observableQueryOptions = newObservableQueryOptions;\n      this.currentObservable.setOptions(newObservableQueryOptions).catch(function () {});\n    }\n  };\n  QueryData.prototype.startQuerySubscription = function (onNewData) {\n    var _this = this;\n    if (onNewData === void 0) {\n      onNewData = this.onNewData;\n    }\n    if (this.currentSubscription || this.getOptions().skip) return;\n    this.currentSubscription = this.currentObservable.subscribe({\n      next: function next(_a) {\n        var loading = _a.loading,\n          networkStatus = _a.networkStatus,\n          data = _a.data;\n        var previousResult = _this.previous.result;\n        if (previousResult && previousResult.loading === loading && previousResult.networkStatus === networkStatus && equal(previousResult.data, data)) {\n          return;\n        }\n        onNewData();\n      },\n      error: function error(_error) {\n        _this.resubscribeToQuery();\n        if (!_error.hasOwnProperty('graphQLErrors')) throw _error;\n        var previousResult = _this.previous.result;\n        if (previousResult && previousResult.loading || !equal(_error, _this.previous.error)) {\n          _this.previous.error = _error;\n          onNewData();\n        }\n      }\n    });\n  };\n  QueryData.prototype.resubscribeToQuery = function () {\n    this.removeQuerySubscription();\n    var currentObservable = this.currentObservable;\n    if (currentObservable) {\n      var lastError = currentObservable.getLastError();\n      var lastResult = currentObservable.getLastResult();\n      currentObservable.resetLastResults();\n      this.startQuerySubscription();\n      Object.assign(currentObservable, {\n        lastError: lastError,\n        lastResult: lastResult\n      });\n    }\n  };\n  QueryData.prototype.handleErrorOrCompleted = function () {\n    if (!this.currentObservable || !this.previous.result) return;\n    var _a = this.previous.result,\n      data = _a.data,\n      loading = _a.loading,\n      error = _a.error;\n    if (!loading) {\n      var _b = this.getOptions(),\n        query = _b.query,\n        variables = _b.variables,\n        onCompleted = _b.onCompleted,\n        onError = _b.onError,\n        skip = _b.skip;\n      if (this.previousOptions && !this.previous.loading && equal(this.previousOptions.query, query) && equal(this.previousOptions.variables, variables)) {\n        return;\n      }\n      if (onCompleted && !error && !skip) {\n        onCompleted(data);\n      } else if (onError && error) {\n        onError(error);\n      }\n    }\n  };\n  QueryData.prototype.removeQuerySubscription = function () {\n    if (this.currentSubscription) {\n      this.currentSubscription.unsubscribe();\n      delete this.currentSubscription;\n    }\n  };\n  QueryData.prototype.removeObservable = function (andDelete) {\n    if (this.currentObservable) {\n      this.currentObservable[\"tearDownQuery\"]();\n      if (andDelete) {\n        delete this.currentObservable;\n      }\n    }\n  };\n  QueryData.prototype.observableQueryFields = function () {\n    var _a;\n    return {\n      variables: (_a = this.currentObservable) === null || _a === void 0 ? void 0 : _a.variables,\n      refetch: this.obsRefetch,\n      fetchMore: this.obsFetchMore,\n      updateQuery: this.obsUpdateQuery,\n      startPolling: this.obsStartPolling,\n      stopPolling: this.obsStopPolling,\n      subscribeToMore: this.obsSubscribeToMore\n    };\n  };\n  return QueryData;\n}(OperationData);\nexport { QueryData };","map":{"version":3,"sources":["../../../src/react/data/QueryData.ts"],"names":[],"mappings":"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","sourcesContent":["import { equal } from '@wry/equality';\n\nimport { ApolloError } from '../../errors';\n\nimport {\n  ApolloClient,\n  NetworkStatus,\n  FetchMoreQueryOptions,\n  SubscribeToMoreOptions,\n  ObservableQuery,\n  FetchMoreOptions,\n  UpdateQueryOptions,\n  DocumentNode,\n  TypedDocumentNode\n} from '../../core';\n\nimport {\n  ObservableSubscription\n} from '../../utilities';\n\nimport { DocumentType } from '../parser';\nimport {\n  QueryResult,\n  QueryDataOptions,\n  QueryTuple,\n  QueryLazyOptions,\n  ObservableQueryFields,\n} from '../types/types';\nimport { OperationData } from './OperationData';\n\nexport class QueryData<TData, TVariables> extends OperationData<\n  QueryDataOptions<TData, TVariables>\n> {\n  public onNewData: () => void;\n  private currentObservable?: ObservableQuery<TData, TVariables>;\n  private currentSubscription?: ObservableSubscription;\n  private runLazy: boolean = false;\n  private lazyOptions?: QueryLazyOptions<TVariables>;\n  private previous: {\n    client?: ApolloClient<object>;\n    query?: DocumentNode | TypedDocumentNode<TData, TVariables>;\n    observableQueryOptions?: {};\n    result?: QueryResult<TData, TVariables>;\n    loading?: boolean;\n    options?: QueryDataOptions<TData, TVariables>;\n    error?: ApolloError;\n  } = Object.create(null);\n\n  constructor({\n    options,\n    context,\n    onNewData\n  }: {\n    options: QueryDataOptions<TData, TVariables>;\n    context: any;\n    onNewData: () => void;\n  }) {\n    super(options, context);\n    this.onNewData = onNewData;\n  }\n\n  public execute(): QueryResult<TData, TVariables> {\n    this.refreshClient();\n\n    const { skip, query } = this.getOptions();\n    if (skip || query !== this.previous.query) {\n      this.removeQuerySubscription();\n      this.removeObservable(!skip);\n      this.previous.query = query;\n    }\n\n    this.updateObservableQuery();\n\n    if (this.isMounted) this.startQuerySubscription();\n\n    return this.getExecuteSsrResult() || this.getExecuteResult();\n  }\n\n  public executeLazy(): QueryTuple<TData, TVariables> {\n    return !this.runLazy\n      ? [\n          this.runLazyQuery,\n          {\n            loading: false,\n            networkStatus: NetworkStatus.ready,\n            called: false,\n            data: undefined\n          }\n        ]\n      : [this.runLazyQuery, this.execute()];\n  }\n\n  // For server-side rendering\n  public fetchData(): Promise<void> | boolean {\n    const options = this.getOptions();\n    if (options.skip || options.ssr === false) return false;\n    return new Promise(resolve => this.startQuerySubscription(resolve));\n  }\n\n  public afterExecute({ lazy = false }: { lazy?: boolean } = {}) {\n    this.isMounted = true;\n\n    if (!lazy || this.runLazy) {\n      this.handleErrorOrCompleted();\n    }\n\n    this.previousOptions = this.getOptions();\n    return this.unmount.bind(this);\n  }\n\n  public cleanup() {\n    this.removeQuerySubscription();\n    this.removeObservable(true);\n    delete this.previous.result;\n  }\n\n  public getOptions() {\n    const options = super.getOptions();\n\n    if (this.lazyOptions) {\n      options.variables = {\n        ...options.variables,\n        ...this.lazyOptions.variables\n      } as TVariables;\n      options.context = {\n        ...options.context,\n        ...this.lazyOptions.context\n      };\n    }\n\n    // skip is not supported when using lazy query execution.\n    if (this.runLazy) {\n      delete options.skip;\n    }\n\n    return options;\n  }\n\n  public ssrInitiated() {\n    return this.context && this.context.renderPromises;\n  }\n\n  private runLazyQuery = (options?: QueryLazyOptions<TVariables>) => {\n    this.cleanup();\n    this.runLazy = true;\n    this.lazyOptions = options;\n    this.onNewData();\n  };\n\n  private getExecuteResult(): QueryResult<TData, TVariables> {\n    const result = this.getQueryResult();\n    this.startQuerySubscription();\n    return result;\n  };\n\n  private getExecuteSsrResult() {\n    const { ssr, skip } = this.getOptions();\n    const ssrDisabled = ssr === false;\n    const fetchDisabled = this.refreshClient().client.disableNetworkFetches;\n\n    const ssrLoading = {\n      loading: true,\n      networkStatus: NetworkStatus.loading,\n      called: true,\n      data: undefined,\n      stale: false,\n      client: this.client,\n      ...this.observableQueryFields(),\n    } as QueryResult<TData, TVariables>;\n\n    // If SSR has been explicitly disabled, and this function has been called\n    // on the server side, return the default loading state.\n    if (ssrDisabled && (this.ssrInitiated() || fetchDisabled)) {\n      this.previous.result = ssrLoading;\n      return ssrLoading;\n    }\n\n    let result;\n    if (this.ssrInitiated()) {\n      if (skip) {\n        result = this.getQueryResult();\n      } else {\n        result =\n          this.context.renderPromises!.addQueryPromise(\n            this,\n            this.getQueryResult\n          ) || ssrLoading;\n      };\n    }\n\n    return result;\n  }\n\n  private prepareObservableQueryOptions() {\n    const options = this.getOptions();\n    this.verifyDocumentType(options.query, DocumentType.Query);\n    const displayName = options.displayName || 'Query';\n\n    // Set the fetchPolicy to cache-first for network-only and cache-and-network\n    // fetches for server side renders.\n    if (\n      this.ssrInitiated() &&\n      (options.fetchPolicy === 'network-only' ||\n        options.fetchPolicy === 'cache-and-network')\n    ) {\n      options.fetchPolicy = 'cache-first';\n    }\n\n    return {\n      ...options,\n      displayName,\n      context: options.context,\n    };\n  }\n\n  private initializeObservableQuery() {\n    // See if there is an existing observable that was used to fetch the same\n    // data and if so, use it instead since it will contain the proper queryId\n    // to fetch the result set. This is used during SSR.\n    if (this.ssrInitiated()) {\n      this.currentObservable = this.context!.renderPromises!.getSSRObservable(\n        this.getOptions()\n      );\n    }\n\n    if (!this.currentObservable) {\n      const observableQueryOptions = this.prepareObservableQueryOptions();\n\n      this.previous.observableQueryOptions = {\n        ...observableQueryOptions,\n        children: null\n      };\n      this.currentObservable = this.refreshClient().client.watchQuery({\n        ...observableQueryOptions\n      });\n\n      if (this.ssrInitiated()) {\n        this.context!.renderPromises!.registerSSRObservable(\n          this.currentObservable,\n          observableQueryOptions\n        );\n      }\n    }\n  }\n\n  private updateObservableQuery() {\n    // If we skipped initially, we may not have yet created the observable\n    if (!this.currentObservable) {\n      this.initializeObservableQuery();\n      return;\n    }\n\n    if (this.getOptions().skip) return;\n\n    const newObservableQueryOptions = {\n      ...this.prepareObservableQueryOptions(),\n      children: null\n    };\n\n    if (\n      !equal(\n        newObservableQueryOptions,\n        this.previous.observableQueryOptions\n      )\n    ) {\n      this.previous.observableQueryOptions = newObservableQueryOptions;\n      this.currentObservable\n        .setOptions(newObservableQueryOptions)\n        // The error will be passed to the child container, so we don't\n        // need to log it here. We could conceivably log something if\n        // an option was set. OTOH we don't log errors w/ the original\n        // query. See https://github.com/apollostack/react-apollo/issues/404\n        .catch(() => {});\n    }\n  }\n\n  // Setup a subscription to watch for Apollo Client `ObservableQuery` changes.\n  // When new data is received, and it doesn't match the data that was used\n  // during the last `QueryData.execute` call (and ultimately the last query\n  // component render), trigger the `onNewData` callback. If not specified,\n  // `onNewData` will fallback to the default `QueryData.onNewData` function\n  // (which usually leads to a query component re-render).\n  private startQuerySubscription(onNewData: () => void = this.onNewData) {\n    if (this.currentSubscription || this.getOptions().skip) return;\n\n    this.currentSubscription = this.currentObservable!.subscribe({\n      next: ({ loading, networkStatus, data }) => {\n        const previousResult = this.previous.result;\n\n        // Make sure we're not attempting to re-render similar results\n        if (\n          previousResult &&\n          previousResult.loading === loading &&\n          previousResult.networkStatus === networkStatus &&\n          equal(previousResult.data, data)\n        ) {\n          return;\n        }\n\n        onNewData();\n      },\n      error: error => {\n        this.resubscribeToQuery();\n        if (!error.hasOwnProperty('graphQLErrors')) throw error;\n\n        const previousResult = this.previous.result;\n        if (\n          (previousResult && previousResult.loading) ||\n          !equal(error, this.previous.error)\n        ) {\n          this.previous.error = error;\n          onNewData();\n        }\n      }\n    });\n  }\n\n  private resubscribeToQuery() {\n    this.removeQuerySubscription();\n\n    // Unfortunately, if `lastError` is set in the current\n    // `observableQuery` when the subscription is re-created,\n    // the subscription will immediately receive the error, which will\n    // cause it to terminate again. To avoid this, we first clear\n    // the last error/result from the `observableQuery` before re-starting\n    // the subscription, and restore it afterwards (so the subscription\n    // has a chance to stay open).\n    const { currentObservable } = this;\n    if (currentObservable) {\n      const lastError = currentObservable.getLastError();\n      const lastResult = currentObservable.getLastResult();\n      currentObservable.resetLastResults();\n      this.startQuerySubscription();\n      Object.assign(currentObservable, {\n        lastError,\n        lastResult\n      });\n    }\n  }\n\n  private getQueryResult = (): QueryResult<TData, TVariables> => {\n    let result = this.observableQueryFields() as QueryResult<TData, TVariables>;\n    const options = this.getOptions();\n\n    // When skipping a query (ie. we're not querying for data but still want\n    // to render children), make sure the `data` is cleared out and\n    // `loading` is set to `false` (since we aren't loading anything).\n    //\n    // NOTE: We no longer think this is the correct behavior. Skipping should\n    // not automatically set `data` to `undefined`, but instead leave the\n    // previous data in place. In other words, skipping should not mandate\n    // that previously received data is all of a sudden removed. Unfortunately,\n    // changing this is breaking, so we'll have to wait until Apollo Client\n    // 4.0 to address this.\n    if (options.skip) {\n      result = {\n        ...result,\n        data: undefined,\n        error: undefined,\n        loading: false,\n        networkStatus: NetworkStatus.ready,\n        called: true,\n      };\n    } else if (this.currentObservable) {\n      // Fetch the current result (if any) from the store.\n      const currentResult = this.currentObservable.getCurrentResult();\n      const { data, loading, partial, networkStatus, errors } = currentResult;\n      let { error } = currentResult;\n\n      // Until a set naming convention for networkError and graphQLErrors is\n      // decided upon, we map errors (graphQLErrors) to the error options.\n      if (errors && errors.length > 0) {\n        error = new ApolloError({ graphQLErrors: errors });\n      }\n\n      result = {\n        ...result,\n        data,\n        loading,\n        networkStatus,\n        error,\n        called: true\n      };\n\n      if (loading) {\n        // Fall through without modifying result...\n      } else if (error) {\n        Object.assign(result, {\n          data: (this.currentObservable.getLastResult() || ({} as any))\n            .data\n        });\n      } else {\n        const { fetchPolicy } = this.currentObservable.options;\n        const { partialRefetch } = options;\n        if (\n          partialRefetch &&\n          partial &&\n          (!data || Object.keys(data).length === 0) &&\n          fetchPolicy !== 'cache-only'\n        ) {\n          // When a `Query` component is mounted, and a mutation is executed\n          // that returns the same ID as the mounted `Query`, but has less\n          // fields in its result, Apollo Client's `QueryManager` returns the\n          // data as `undefined` since a hit can't be found in the cache.\n          // This can lead to application errors when the UI elements rendered by\n          // the original `Query` component are expecting certain data values to\n          // exist, and they're all of a sudden stripped away. To help avoid\n          // this we'll attempt to refetch the `Query` data.\n          Object.assign(result, {\n            loading: true,\n            networkStatus: NetworkStatus.loading\n          });\n          result.refetch();\n          return result;\n        }\n      }\n    }\n\n    result.client = this.client;\n    // Store options as this.previousOptions.\n    this.setOptions(options, true);\n\n    const previousResult = this.previous.result;\n\n    this.previous.loading =\n      previousResult && previousResult.loading || false;\n\n    // Ensure the returned result contains previousData as a separate\n    // property, to give developers the flexibility of leveraging outdated\n    // data while new data is loading from the network. Falling back to\n    // previousResult.previousData when previousResult.data is falsy here\n    // allows result.previousData to persist across multiple results.\n    result.previousData = previousResult &&\n      (previousResult.data || previousResult.previousData);\n\n    this.previous.result = result;\n\n    // Any query errors that exist are now available in `result`, so we'll\n    // remove the original errors from the `ObservableQuery` query store to\n    // make sure they aren't re-displayed on subsequent (potentially error\n    // free) requests/responses.\n    this.currentObservable && this.currentObservable.resetQueryStoreErrors();\n\n    return result;\n  }\n\n  private handleErrorOrCompleted() {\n    if (!this.currentObservable || !this.previous.result) return;\n\n    const { data, loading, error } = this.previous.result;\n\n    if (!loading) {\n      const {\n        query,\n        variables,\n        onCompleted,\n        onError,\n        skip\n      } = this.getOptions();\n\n      // No changes, so we won't call onError/onCompleted.\n      if (\n        this.previousOptions &&\n        !this.previous.loading &&\n        equal(this.previousOptions.query, query) &&\n        equal(this.previousOptions.variables, variables)\n      ) {\n        return;\n      }\n\n      if (onCompleted && !error && !skip) {\n        onCompleted(data as TData);\n      } else if (onError && error) {\n        onError(error);\n      }\n    }\n  }\n\n  private removeQuerySubscription() {\n    if (this.currentSubscription) {\n      this.currentSubscription.unsubscribe();\n      delete this.currentSubscription;\n    }\n  }\n\n  private removeObservable(andDelete: boolean) {\n    if (this.currentObservable) {\n      this.currentObservable[\"tearDownQuery\"]();\n      if (andDelete) {\n        delete this.currentObservable;\n      }\n    }\n  }\n\n  private obsRefetch = (variables?: Partial<TVariables>) =>\n    this.currentObservable?.refetch(variables);\n\n  private obsFetchMore = <K extends keyof TVariables>(\n    fetchMoreOptions: FetchMoreQueryOptions<TVariables, K, TData> &\n      FetchMoreOptions<TData, TVariables>\n  ) => this.currentObservable!.fetchMore(fetchMoreOptions);\n\n  private obsUpdateQuery = <TVars = TVariables>(\n    mapFn: (\n      previousQueryResult: TData,\n      options: UpdateQueryOptions<TVars>\n    ) => TData\n  ) => this.currentObservable!.updateQuery(mapFn);\n\n  private obsStartPolling = (pollInterval: number) => {\n    this.currentObservable?.startPolling(pollInterval);\n  };\n\n  private obsStopPolling = () => {\n    this.currentObservable?.stopPolling();\n  };\n\n  private obsSubscribeToMore = <\n    TSubscriptionData = TData,\n    TSubscriptionVariables = TVariables\n  >(\n    options: SubscribeToMoreOptions<\n      TData,\n      TSubscriptionVariables,\n      TSubscriptionData\n    >\n  ) => this.currentObservable!.subscribeToMore(options);\n\n  private observableQueryFields() {\n    return {\n      variables: this.currentObservable?.variables,\n      refetch: this.obsRefetch,\n      fetchMore: this.obsFetchMore,\n      updateQuery: this.obsUpdateQuery,\n      startPolling: this.obsStartPolling,\n      stopPolling: this.obsStopPolling,\n      subscribeToMore: this.obsSubscribeToMore\n    } as ObservableQueryFields<TData, TVariables>;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}