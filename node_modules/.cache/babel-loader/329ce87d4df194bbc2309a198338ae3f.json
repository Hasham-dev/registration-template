{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Observable } from \"./Observable.js\";\nimport { iterateObserversSafely } from \"./iteration.js\";\nimport { fixObservableSubclass } from \"./subclassing.js\";\nfunction isPromiseLike(value) {\n  return value && typeof value.then === \"function\";\n}\nvar Concast = function (_super) {\n  __extends(Concast, _super);\n  function Concast(sources) {\n    var _this = _super.call(this, function (observer) {\n      _this.addObserver(observer);\n      return function () {\n        return _this.removeObserver(observer);\n      };\n    }) || this;\n    _this.observers = new Set();\n    _this.addCount = 0;\n    _this.promise = new Promise(function (resolve, reject) {\n      _this.resolve = resolve;\n      _this.reject = reject;\n    });\n    _this.handlers = {\n      next: function next(result) {\n        if (_this.sub !== null) {\n          _this.latest = [\"next\", result];\n          iterateObserversSafely(_this.observers, \"next\", result);\n        }\n      },\n      error: function error(_error) {\n        var sub = _this.sub;\n        if (sub !== null) {\n          if (sub) Promise.resolve().then(function () {\n            return sub.unsubscribe();\n          });\n          _this.sub = null;\n          _this.latest = [\"error\", _error];\n          _this.reject(_error);\n          iterateObserversSafely(_this.observers, \"error\", _error);\n        }\n      },\n      complete: function complete() {\n        if (_this.sub !== null) {\n          var value = _this.sources.shift();\n          if (!value) {\n            _this.sub = null;\n            if (_this.latest && _this.latest[0] === \"next\") {\n              _this.resolve(_this.latest[1]);\n            } else {\n              _this.resolve();\n            }\n            iterateObserversSafely(_this.observers, \"complete\");\n          } else if (isPromiseLike(value)) {\n            value.then(function (obs) {\n              return _this.sub = obs.subscribe(_this.handlers);\n            });\n          } else {\n            _this.sub = value.subscribe(_this.handlers);\n          }\n        }\n      }\n    };\n    _this.cancel = function (reason) {\n      _this.reject(reason);\n      _this.sources = [];\n      _this.handlers.complete();\n    };\n    _this.promise.catch(function (_) {});\n    if (typeof sources === \"function\") {\n      sources = [new Observable(sources)];\n    }\n    if (isPromiseLike(sources)) {\n      sources.then(function (iterable) {\n        return _this.start(iterable);\n      }, _this.handlers.error);\n    } else {\n      _this.start(sources);\n    }\n    return _this;\n  }\n  Concast.prototype.start = function (sources) {\n    if (this.sub !== void 0) return;\n    this.sources = Array.from(sources);\n    this.handlers.complete();\n  };\n  Concast.prototype.deliverLastMessage = function (observer) {\n    if (this.latest) {\n      var nextOrError = this.latest[0];\n      var method = observer[nextOrError];\n      if (method) {\n        method.call(observer, this.latest[1]);\n      }\n      if (this.sub === null && nextOrError === \"next\" && observer.complete) {\n        observer.complete();\n      }\n    }\n  };\n  Concast.prototype.addObserver = function (observer) {\n    if (!this.observers.has(observer)) {\n      this.deliverLastMessage(observer);\n      this.observers.add(observer);\n      ++this.addCount;\n    }\n  };\n  Concast.prototype.removeObserver = function (observer, quietly) {\n    if (this.observers.delete(observer) && --this.addCount < 1 && !quietly) {\n      this.handlers.error(new Error(\"Observable cancelled prematurely\"));\n    }\n  };\n  Concast.prototype.cleanup = function (callback) {\n    var _this = this;\n    var called = false;\n    var once = function once() {\n      if (!called) {\n        called = true;\n        _this.observers.delete(observer);\n        callback();\n      }\n    };\n    var observer = {\n      next: once,\n      error: once,\n      complete: once\n    };\n    var count = this.addCount;\n    this.addObserver(observer);\n    this.addCount = count;\n  };\n  return Concast;\n}(Observable);\nexport { Concast };\nfixObservableSubclass(Concast);","map":{"version":3,"sources":["../../../src/utilities/observables/Concast.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable, Observer, ObservableSubscription, Subscriber } from \"./Observable\";\nimport { iterateObserversSafely } from \"./iteration\";\nimport { fixObservableSubclass } from \"./subclassing\";\n\ntype MaybeAsync<T> = T | PromiseLike<T>;\n\nfunction isPromiseLike<T>(value: MaybeAsync<T>): value is PromiseLike<T> {\n  return value && typeof (value as any).then === \"function\";\n}\n\n// Any individual Source<T> can be an Observable<T> or a promise for one.\ntype Source<T> = MaybeAsync<Observable<T>>;\n\nexport type ConcastSourcesIterable<T> = Iterable<Source<T>>;\n\n// A Concast<T> observable concatenates the given sources into a single\n// non-overlapping sequence of Ts, automatically unwrapping any promises,\n// and broadcasts the T elements of that sequence to any number of\n// subscribers, all without creating a bunch of intermediary Observable\n// wrapper objects.\n//\n// Even though any number of observers can subscribe to the Concast, each\n// source observable is guaranteed to receive at most one subscribe call,\n// and the results are multicast to all observers.\n//\n// In addition to broadcasting every next/error message to this.observers,\n// the Concast stores the most recent message using this.latest, so any\n// new observers can immediately receive the latest message, even if it\n// was originally delivered in the past. This behavior means we can assume\n// every active observer in this.observers has received the same most\n// recent message.\n//\n// With the exception of this.latest replay, a Concast is a \"hot\"\n// observable in the sense that it does not replay past results from the\n// beginning of time for each new observer.\n//\n// Could we have used some existing RxJS class instead? Concast<T> is\n// similar to a BehaviorSubject<T>, because it is multicast and redelivers\n// the latest next/error message to new subscribers. Unlike Subject<T>,\n// Concast<T> does not expose an Observer<T> interface (this.handlers is\n// intentionally private), since Concast<T> gets its inputs from the\n// concatenated sources. If we ever switch to RxJS, there may be some\n// value in reusing their code, but for now we use zen-observable, which\n// does not contain any Subject implementations.\nexport class Concast<T> extends Observable<T> {\n  // Active observers receiving broadcast messages. Thanks to this.latest,\n  // we can assume all observers in this Set have received the same most\n  // recent message, though possibly at different times in the past.\n  private observers = new Set<Observer<T>>();\n\n  // This property starts off undefined to indicate the initial\n  // subscription has not yet begun, then points to each source\n  // subscription in turn, and finally becomes null after the sources have\n  // been exhausted. After that, it stays null.\n  private sub?: ObservableSubscription | null;\n\n  // Not only can the individual elements of the iterable be promises, but\n  // also the iterable itself can be wrapped in a promise.\n  constructor(sources: MaybeAsync<ConcastSourcesIterable<T>> | Subscriber<T>) {\n    super(observer => {\n      this.addObserver(observer);\n      return () => this.removeObserver(observer);\n    });\n\n    // Suppress rejection warnings for this.promise, since it's perfectly\n    // acceptable to pay no attention to this.promise if you're consuming\n    // the results through the normal observable API.\n    this.promise.catch(_ => {});\n\n    // If someone accidentally tries to create a Concast using a subscriber\n    // function, recover by creating an Observable from that subscriber and\n    // using it as the source.\n    if (typeof sources === \"function\") {\n      sources = [new Observable(sources)];\n    }\n\n    if (isPromiseLike(sources)) {\n      sources.then(\n        iterable => this.start(iterable),\n        this.handlers.error,\n      );\n    } else {\n      this.start(sources);\n    }\n  }\n\n  // A consumable array of source observables, incrementally consumed\n  // each time this.handlers.complete is called.\n  private sources: Source<T>[];\n\n  private start(sources: ConcastSourcesIterable<T>) {\n    if (this.sub !== void 0) return;\n\n    // In practice, sources is most often simply an Array of observables.\n    // TODO Consider using sources[Symbol.iterator]() to take advantage\n    // of the laziness of non-Array iterables.\n    this.sources = Array.from(sources);\n\n    // Calling this.handlers.complete() kicks off consumption of the first\n    // source observable. It's tempting to do this step lazily in\n    // addObserver, but this.promise can be accessed without calling\n    // addObserver, so consumption needs to begin eagerly.\n    this.handlers.complete();\n  }\n\n  private deliverLastMessage(observer: Observer<T>) {\n    if (this.latest) {\n      const nextOrError = this.latest[0];\n      const method = observer[nextOrError];\n      if (method) {\n        method.call(observer, this.latest[1]);\n      }\n      // If the subscription is already closed, and the last message was\n      // a 'next' message, simulate delivery of the final 'complete'\n      // message again.\n      if (this.sub === null &&\n          nextOrError === \"next\" &&\n          observer.complete) {\n        observer.complete();\n      }\n    }\n  }\n\n  // Note: cleanup observers do not count towards this total.\n  private addCount = 0;\n\n  public addObserver(observer: Observer<T>) {\n    if (!this.observers.has(observer)) {\n      // Immediately deliver the most recent message, so we can always\n      // be sure all observers have the latest information.\n      this.deliverLastMessage(observer);\n      this.observers.add(observer);\n      ++this.addCount;\n    }\n  }\n\n  public removeObserver(\n    observer: Observer<T>,\n    quietly?: boolean,\n  ) {\n    if (this.observers.delete(observer) &&\n        --this.addCount < 1 &&\n        !quietly) {\n      // In case there are still any cleanup observers in this.observers,\n      // and no error or completion has been broadcast yet, make sure\n      // those observers receive an error that terminates them.\n      this.handlers.error(new Error(\"Observable cancelled prematurely\"));\n    }\n  }\n\n  // Any Concast object can be trivially converted to a Promise, without\n  // having to create a new wrapper Observable. This promise provides an\n  // easy way to observe the final state of the Concast.\n  private resolve: (result?: T | PromiseLike<T>) => void;\n  private reject: (reason: any) => void;\n  public readonly promise = new Promise<T>((resolve, reject) => {\n    this.resolve = resolve;\n    this.reject = reject;\n  });\n\n  // Name and argument of the most recently invoked observer method, used\n  // to deliver latest results immediately to new observers.\n  private latest?: [\"next\" | \"error\", any];\n\n  // Bound handler functions that can be reused for every internal\n  // subscription.\n  private handlers = {\n    next: (result: T) => {\n      if (this.sub !== null) {\n        this.latest = [\"next\", result];\n        iterateObserversSafely(this.observers, \"next\", result);\n      }\n    },\n\n    error: (error: any) => {\n      const { sub } = this;\n      if (sub !== null) {\n        // Delay unsubscribing from the underlying subscription slightly,\n        // so that immediately subscribing another observer can keep the\n        // subscription active.\n        if (sub) Promise.resolve().then(() => sub.unsubscribe());\n        this.sub = null;\n        this.latest = [\"error\", error];\n        this.reject(error);\n        iterateObserversSafely(this.observers, \"error\", error);\n      }\n    },\n\n    complete: () => {\n      if (this.sub !== null) {\n        const value = this.sources.shift();\n        if (!value) {\n          this.sub = null;\n          if (this.latest &&\n              this.latest[0] === \"next\") {\n            this.resolve(this.latest[1]);\n          } else {\n            this.resolve();\n          }\n          // We do not store this.latest = [\"complete\"], because doing so\n          // discards useful information about the previous next (or\n          // error) message. Instead, if new observers subscribe after\n          // this Concast has completed, they will receive the final\n          // 'next' message (unless there was an error) immediately\n          // followed by a 'complete' message (see addObserver).\n          iterateObserversSafely(this.observers, \"complete\");\n        } else if (isPromiseLike(value)) {\n          value.then(obs => this.sub = obs.subscribe(this.handlers));\n        } else {\n          this.sub = value.subscribe(this.handlers);\n        }\n      }\n    },\n  };\n\n  public cleanup(callback: () => any) {\n    let called = false;\n    const once = () => {\n      if (!called) {\n        called = true;\n        // Removing a cleanup observer should not unsubscribe from the\n        // underlying Observable, so the only removeObserver behavior we\n        // need here is to delete observer from this.observers.\n        this.observers.delete(observer);\n        callback();\n      }\n    }\n    const observer = {\n      next: once,\n      error: once,\n      complete: once,\n    };\n    const count = this.addCount;\n    this.addObserver(observer);\n    // Normally addObserver increments this.addCount, but we can \"hide\"\n    // cleanup observers by restoring this.addCount to its previous value\n    // after adding any cleanup observer.\n    this.addCount = count;\n  }\n\n  // A public way to abort observation and broadcast.\n  public cancel = (reason: any) => {\n    this.reject(reason);\n    this.sources = [];\n    this.handlers.complete();\n  }\n}\n\n// Necessary because the Concast constructor has a different signature\n// than the Observable constructor.\nfixObservableSubclass(Concast);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}