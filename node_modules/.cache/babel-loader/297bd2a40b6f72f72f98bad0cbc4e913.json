{"ast":null,"code":"import React from 'react';\nimport { canUseWeakMap } from \"../../utilities/index.js\";\nvar cache = new (canUseWeakMap ? WeakMap : Map)();\nexport function getApolloContext() {\n  var context = cache.get(React.createContext);\n  if (!context) {\n    context = React.createContext({});\n    context.displayName = 'ApolloContext';\n    cache.set(React.createContext, context);\n  }\n  return context;\n}\nexport { getApolloContext as resetApolloContext };","map":{"version":3,"sources":["../../../src/react/context/ApolloContext.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO;AAEzB,SAAS,aAAa,QAAQ,0BAAkB;AAchD,IAAM,KAAK,GAAG,KAAK,aAAa,GAAG,OAAO,GAAG,GAAG,GAG7C;AAEH,OAAM,SAAU,gBAAgB,GAAA;EAC9B,IAAI,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,aAAa,CAAE;EAC7C,IAAI,CAAC,OAAO,EAAE;IACZ,OAAO,GAAG,KAAK,CAAC,aAAa,CAAqB,CAAA,CAAE,CAAC;IACrD,OAAO,CAAC,WAAW,GAAG,eAAe;IACrC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,aAAa,EAAE,OAAO,CAAC;EACxC;EACD,OAAO,OAAO;AAChB;AAEA,SAAS,gBAAgB,IAAI,kBAAkB","sourcesContent":["import React from 'react';\nimport { ApolloClient } from '../../core';\nimport { canUseWeakMap } from '../../utilities';\n\nexport interface ApolloContextValue {\n  client?: ApolloClient<object>;\n  renderPromises?: Record<any, any>;\n}\n\n// To make sure Apollo Client doesn't create more than one React context\n// (which can lead to problems like having an Apollo Client instance added\n// in one context, then attempting to retrieve it from another different\n// context), a single Apollo context is created and tracked in global state.\n// We use React.createContext as the key instead of just React to avoid\n// ambiguities between default and namespace React imports.\n\nconst cache = new (canUseWeakMap ? WeakMap : Map)<\n  typeof React.createContext,\n  React.Context<ApolloContextValue>\n>();\n\nexport function getApolloContext() {\n  let context = cache.get(React.createContext)!;\n  if (!context) {\n    context = React.createContext<ApolloContextValue>({});\n    context.displayName = 'ApolloContext';\n    cache.set(React.createContext, context);\n  }\n  return context;\n}\n\nexport { getApolloContext as resetApolloContext }\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}