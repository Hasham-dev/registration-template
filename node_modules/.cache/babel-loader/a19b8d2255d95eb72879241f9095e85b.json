{"ast":null,"code":"import { invariant } from 'ts-invariant';\nexport var DocumentType;\n(function (DocumentType) {\n  DocumentType[DocumentType[\"Query\"] = 0] = \"Query\";\n  DocumentType[DocumentType[\"Mutation\"] = 1] = \"Mutation\";\n  DocumentType[DocumentType[\"Subscription\"] = 2] = \"Subscription\";\n})(DocumentType || (DocumentType = {}));\nvar cache = new Map();\nexport function operationName(type) {\n  var name;\n  switch (type) {\n    case DocumentType.Query:\n      name = 'Query';\n      break;\n    case DocumentType.Mutation:\n      name = 'Mutation';\n      break;\n    case DocumentType.Subscription:\n      name = 'Subscription';\n      break;\n  }\n  return name;\n}\nexport function parser(document) {\n  var cached = cache.get(document);\n  if (cached) return cached;\n  var variables, type, name;\n  process.env.NODE_ENV === \"production\" ? invariant(!!document && !!document.kind, 34) : invariant(!!document && !!document.kind, \"Argument of \" + document + \" passed to parser was not a valid GraphQL \" + \"DocumentNode. You may need to use 'graphql-tag' or another method \" + \"to convert your operation into a document\");\n  var fragments = document.definitions.filter(function (x) {\n    return x.kind === 'FragmentDefinition';\n  });\n  var queries = document.definitions.filter(function (x) {\n    return x.kind === 'OperationDefinition' && x.operation === 'query';\n  });\n  var mutations = document.definitions.filter(function (x) {\n    return x.kind === 'OperationDefinition' && x.operation === 'mutation';\n  });\n  var subscriptions = document.definitions.filter(function (x) {\n    return x.kind === 'OperationDefinition' && x.operation === 'subscription';\n  });\n  process.env.NODE_ENV === \"production\" ? invariant(!fragments.length || queries.length || mutations.length || subscriptions.length, 35) : invariant(!fragments.length || queries.length || mutations.length || subscriptions.length, \"Passing only a fragment to 'graphql' is not yet supported. \" + \"You must include a query, subscription or mutation as well\");\n  process.env.NODE_ENV === \"production\" ? invariant(queries.length + mutations.length + subscriptions.length <= 1, 36) : invariant(queries.length + mutations.length + subscriptions.length <= 1, \"react-apollo only supports a query, subscription, or a mutation per HOC. \" + (document + \" had \" + queries.length + \" queries, \" + subscriptions.length + \" \") + (\"subscriptions and \" + mutations.length + \" mutations. \") + \"You can use 'compose' to join multiple operation types to a component\");\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n  var definitions = queries.length ? queries : mutations.length ? mutations : subscriptions;\n  process.env.NODE_ENV === \"production\" ? invariant(definitions.length === 1, 37) : invariant(definitions.length === 1, \"react-apollo only supports one definition per HOC. \" + document + \" had \" + (definitions.length + \" definitions. \") + \"You can use 'compose' to join multiple operation types to a component\");\n  var definition = definitions[0];\n  variables = definition.variableDefinitions || [];\n  if (definition.name && definition.name.kind === 'Name') {\n    name = definition.name.value;\n  } else {\n    name = 'data';\n  }\n  var payload = {\n    name: name,\n    type: type,\n    variables: variables\n  };\n  cache.set(document, payload);\n  return payload;\n}","map":{"version":3,"sources":["../../../src/react/parser/index.ts"],"names":[],"mappings":"AAMA,SAAS,SAAS,QAAQ,cAAc;AAExC,OAAA,IAAY,YAIX;AAJD,CAAA,UAAY,YAAY,EAAA;EACtB,YAAA,CAAA,YAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAK;EACL,YAAA,CAAA,YAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAQ;EACR,YAAA,CAAA,YAAA,CAAA,cAAA,CAAA,GAAA,CAAA,CAAA,GAAA,cAAY;AACd,CAAC,EAJW,YAAY,KAAZ,YAAY,GAAA,CAAA,CAAA,CAAA,CAAA;AAYxB,IAAM,KAAK,GAAG,IAAI,GAAG,EAAE;AAEvB,OAAM,SAAU,aAAa,CAAC,IAAkB,EAAA;EAC9C,IAAI,IAAI;EACR,QAAQ,IAAI;IACV,KAAK,YAAY,CAAC,KAAK;MACrB,IAAI,GAAG,OAAO;MACd;IACF,KAAK,YAAY,CAAC,QAAQ;MACxB,IAAI,GAAG,UAAU;MACjB;IACF,KAAK,YAAY,CAAC,YAAY;MAC5B,IAAI,GAAG,cAAc;MACrB;EAAM;EAEV,OAAO,IAAI;AACb;AAGA,OAAM,SAAU,MAAM,CAAC,QAAsB,EAAA;EAC3C,IAAM,MAAM,GAAG,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC;EAClC,IAAI,MAAM,EAAE,OAAO,MAAM;EAEzB,IAAI,SAAS,EAAE,IAAI,EAAE,IAAI;EAEzB,OAAA,CAAA,GACG,CAAC,QAAQ,KAAK,YAAU,GAAI,SAC7B,CAAA,CAAA,CAAA,QAAe,IAAA,CAAA,CAAQ,QAAA,CAAA,IAAA,EAAA,EAAA,CAAA,GAAA,SAAA,CAAA,CAAA,CAAA,QAAA,IAAA,CAAA,CAA4C,QAAA,CAAA,IAAA,EAAA,cAAA,GAAA,QAAA,GAAA,4CAAA,GACjE,oEAAoE,GACpE,2CAA2C,CAC9C;EAED,IAAM,SAAS,GAAG,QAAQ,CAAC,WAAW,CAAC,MAAM,CAC3C,UAAC,CAAiB,EAAA;IAAK,OAAA,CAAC,CAAC,IAAI,KAAK,oBAAoB;EAA/B,CAA+B,CACvD;EAED,IAAM,OAAO,GAAG,QAAQ,CAAC,WAAW,CAAC,MAAM,CACzC,UAAC,CAAiB,EAAA;IAChB,OAAA,CAAC,CAAC,IAAI,KAAK,qBAAqB,IAAI,CAAC,CAAC,SAAS,KAAK,OAAO;EAA3D,CAA2D,CAC9D;EAED,IAAM,SAAS,GAAG,QAAQ,CAAC,WAAW,CAAC,MAAM,CAC3C,UAAC,CAAiB,EAAA;IAChB,OAAA,CAAC,CAAC,IAAI,KAAK,qBAAqB,IAAI,CAAC,CAAC,SAAS,KAAK,UAAU;EAA9D,CAA8D,CACjE;EAED,IAAM,aAAa,GAAG,QAAQ,CAAC,WAAW,CAAC,MAAM,CAC/C,UAAC,CAAiB,EAAA;IAChB,OAAA,CAAC,CAAC,IAAI,KAAK,qBAAqB,IAAI,CAAC,CAAC,SAAS,KAAK,cAAc;EAAlE,CAAkE,CACrE;EAED,OAAA,CAAA,GACG,CAAA,QAAS,KAAC,YAAM,GAAA,SAAA,CAAA,CAAA,SAAA,CAAA,MAAA,IACd,OAAO,CAAC,MAAM,IAAI,SAAS,CAAC,MAAM,IAAI,aAAa,CAAC,MAAO,EAC9D,EAAA,CAAA,GAAA,SAAA,CAAA,CAAA,SAAA,CAAA,MAAA,IACE,OAAA,CAAA,MAAA,IAAA,SAAA,CAAA,MAAA,IAAA,aAAA,CAAA,MAA4D,EAC9D,6DAAA,GAEF,4DACoD,CAAA;EAE7C,OAAA,CAAA,GAAA,CAAA,QAAQ,KAAA,YAAgB,GAAM,SAAA,CAAA,OAAA,CAAa,MAAA,GAAA,SAAc,CAAA,MAAM,GAAG,aAAA,CAAA,MAAA,IAAA,CAAA,EAAA,EAAA,CAAA,GAAA,SAAA,CAAA,OAAA,CAAA,MAAA,GAAA,SAAA,CAAA,MAAA,GAAA,aAAA,CAAA,MAAA,IAAA,CAAA,EAAA,2EAAA,IACrE,QAAA,GAAA,OAAA,GAAA,OAAqB,CAAA,MAAU,GAAA,YAAM,GAAA,aAAc,CAAA,MAAA,GAAA,GAAA,CAAA,IACnD,oBAAA,GAAA,SAAA,CAAA,MAAA,GAAA,cAAA,CAAA,GAGA,uEAA+D,CAAA;EACnE,IAAI,GAAC,OAAQ,CAAA,MAAM,GAAK,YAAU,CAAA,KAAM,GAAA,YAAA,CAAA,QAAA;MAAE,CAAA,OAAO,CAAA,MAAA,IAAY,CAAC,SAAA,CAAA,MAAa,EAErE,IAAA,GAAA,YAAc,CAAA,YAAc;MAChC,WAAS,GAAA,OAAA,CAAA,MAAA,GACP,OAAA,GACF,SAAE,CAAA,MAAS,GACT,SAAA,GAGF,aAAY;EAEP,OAAA,CAAA,GAAA,CAAA,QAAY,KAAM,YAAA,GAAA,SAAgB,CAAA,WAAA,CAAA,MAAA,KAAA,CAAA,EAAA,EAAA,CAAA,GAAA,SAAA,CAAA,WAAA,CAAA,MAAA,KAAA,CAAA,EAAA,qDAAA,GAAA,QAAA,GAAA,OAAA,IACrC,WAAA,CAAA,MAAA,GAAA,gBAAA,CAAA,GAGE,uEAAuD,CAAA;EAC7D,IAAA,UAAY,GAAA,WAAW,CAAA,CAAA,CAAA;EAEvB,SAAI,GAAA,UAAe,CAAI,mBAAgB,IAAI,EAAK;MAC9C,UAAO,CAAA,IAAA,IAAW,UAAW,CAAA,IAAA,CAAA,IAAA,KAAA,MAAA,EAAA;IAC9B,IAAA,GAAA,UAAA,CAAA,IAAA,CAAA,KAAA;GAAM,MACL;IACD,IAAA,GAAA,MAAA;EAED;EACA,IAAA,OAAU,GAAA;IAAA,IAAU,EAAA,IAAA;IAAQ,IAAC,EAAA,IAAA;IAAA,SAAA,EAAA;EAAA,CAAA;EAC7B,KAAA,CAAA,GAAO,CAAA,QAAQ,EAAA,OAAA,CAAA;EAChB,OAAA,OAAA","sourcesContent":["import {\n  DocumentNode,\n  DefinitionNode,\n  VariableDefinitionNode,\n  OperationDefinitionNode\n} from 'graphql';\nimport { invariant } from 'ts-invariant';\n\nexport enum DocumentType {\n  Query,\n  Mutation,\n  Subscription\n}\n\nexport interface IDocumentDefinition {\n  type: DocumentType;\n  name: string;\n  variables: ReadonlyArray<VariableDefinitionNode>;\n}\n\nconst cache = new Map();\n\nexport function operationName(type: DocumentType) {\n  let name;\n  switch (type) {\n    case DocumentType.Query:\n      name = 'Query';\n      break;\n    case DocumentType.Mutation:\n      name = 'Mutation';\n      break;\n    case DocumentType.Subscription:\n      name = 'Subscription';\n      break;\n  }\n  return name;\n}\n\n// This parser is mostly used to saftey check incoming documents.\nexport function parser(document: DocumentNode): IDocumentDefinition {\n  const cached = cache.get(document);\n  if (cached) return cached;\n\n  let variables, type, name;\n\n  invariant(\n    !!document && !!document.kind,\n    `Argument of ${document} passed to parser was not a valid GraphQL ` +\n      `DocumentNode. You may need to use 'graphql-tag' or another method ` +\n      `to convert your operation into a document`\n  );\n\n  const fragments = document.definitions.filter(\n    (x: DefinitionNode) => x.kind === 'FragmentDefinition'\n  );\n\n  const queries = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'query'\n  );\n\n  const mutations = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'mutation'\n  );\n\n  const subscriptions = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'subscription'\n  );\n\n  invariant(\n    !fragments.length ||\n      (queries.length || mutations.length || subscriptions.length),\n    `Passing only a fragment to 'graphql' is not yet supported. ` +\n      `You must include a query, subscription or mutation as well`\n  );\n\n  invariant(\n    queries.length + mutations.length + subscriptions.length <= 1,\n    `react-apollo only supports a query, subscription, or a mutation per HOC. ` +\n      `${document} had ${queries.length} queries, ${subscriptions.length} ` +\n      `subscriptions and ${mutations.length} mutations. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n\n  const definitions = queries.length\n    ? queries\n    : mutations.length\n    ? mutations\n    : subscriptions;\n\n  invariant(\n    definitions.length === 1,\n    `react-apollo only supports one definition per HOC. ${document} had ` +\n      `${definitions.length} definitions. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  const definition = definitions[0] as OperationDefinitionNode;\n  variables = definition.variableDefinitions || [];\n\n  if (definition.name && definition.name.kind === 'Name') {\n    name = definition.name.value;\n  } else {\n    name = 'data'; // fallback to using data if no name\n  }\n\n  const payload = { name, type, variables };\n  cache.set(document, payload);\n  return payload;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}