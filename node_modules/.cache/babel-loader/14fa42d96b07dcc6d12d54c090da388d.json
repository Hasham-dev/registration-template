{"ast":null,"code":"import { __extends } from 'tslib';\nvar genericMessage = \"Invariant Violation\";\nvar _a = Object.setPrototypeOf,\n  setPrototypeOf = _a === void 0 ? function (obj, proto) {\n    obj.__proto__ = proto;\n    return obj;\n  } : _a;\nvar InvariantError = /** @class */function (_super) {\n  __extends(InvariantError, _super);\n  function InvariantError(message) {\n    if (message === void 0) {\n      message = genericMessage;\n    }\n    var _this = _super.call(this, typeof message === \"number\" ? genericMessage + \": \" + message + \" (see https://github.com/apollographql/invariant-packages)\" : message) || this;\n    _this.framesToPop = 1;\n    _this.name = genericMessage;\n    setPrototypeOf(_this, InvariantError.prototype);\n    return _this;\n  }\n  return InvariantError;\n}(Error);\nfunction invariant(condition, message) {\n  if (!condition) {\n    throw new InvariantError(message);\n  }\n}\nvar verbosityLevels = [\"log\", \"warn\", \"error\", \"silent\"];\nvar verbosityLevel = verbosityLevels.indexOf(\"log\");\nfunction wrapConsoleMethod(method) {\n  return function () {\n    if (verbosityLevels.indexOf(method) >= verbosityLevel) {\n      return console[method].apply(console, arguments);\n    }\n  };\n}\n(function (invariant) {\n  invariant.log = wrapConsoleMethod(\"log\");\n  invariant.warn = wrapConsoleMethod(\"warn\");\n  invariant.error = wrapConsoleMethod(\"error\");\n})(invariant || (invariant = {}));\nfunction setVerbosity(level) {\n  var old = verbosityLevels[verbosityLevel];\n  verbosityLevel = Math.max(0, verbosityLevels.indexOf(level));\n  return old;\n}\n// Code that uses ts-invariant with rollup-plugin-invariant may want to\n// import this process stub to avoid errors evaluating process.env.NODE_ENV.\n// However, because most ESM-to-CJS compilers will rewrite the process import\n// as tsInvariant.process, which prevents proper replacement by minifiers, we\n// also export processStub, so you can import { invariant, processStub } from\n// \"ts-invariant\" and assign processStub to a local variable named process.\nvar processStub = typeof process === \"object\" && typeof process.env === \"object\" ? process : {\n  env: {}\n};\nvar invariant$1 = invariant;\nexport default invariant$1;\nexport { InvariantError, invariant, processStub as process, processStub, setVerbosity };","map":{"version":3,"sources":["../src/invariant.ts"],"names":[],"mappings":";AAAA,IAAM,cAAc,GAAG,qBAAqB;AAE1C,IAAA,EAAA,GAIE,MAAa,CAAA,cADd;EAHD,cAAc,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,UAAU,GAAQ,EAAE,KAAU,EAAA;IAC7C,GAAG,CAAC,SAAS,GAAG,KAAK;IACrB,OAAO,GAAG;EACZ,CAAC,GAAA,EAAA;;EAGiC,SAAA,CAAA,cAAA,EAAA,MAAA,CAAA;EAGlC,SAAA,cAAA,CAAY,OAAyC,EAAA;IAAzC,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA;MAAA,OAAA,GAAA,cAAyC;IAAA;IAArD,IAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EACE,OAAO,OAAO,KAAK,QAAQ,GACpB,cAAc,GAAA,IAAA,GAAK,OAAO,GAAA,4DAA4D,GACzF,OAAO,CACZ,IAAA,IAAA;IAPH,KAAA,CAAA,WAAW,GAAG,CAAC;IACf,KAAA,CAAA,IAAI,GAAG,cAAc;IAOnB,cAAc,CAAC,KAAI,EAAE,cAAc,CAAC,SAAS,CAAC;;EAC/C;EACH,OAAA,cAAC;AAAD,CAXA,CAAoC,KAAK,CAAA;SAazB,SAAS,CACvB,SAAc,EACd,OAAyB,EAAA;EAEzB,IAAI,CAAC,SAAS,EAAE;IACd,MAAM,IAAI,cAAc,CAAC,OAAO,CAAC;EAClC;AACH;AAEA,IAAM,eAAe,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,CAAU;AAGnE,IAAI,cAAc,GAAG,eAAe,CAAC,OAAO,CAAC,KAAK,CAAC;AAEnD,SAAS,iBAAiB,CAA8B,MAAS,EAAA;EAC/D,OAAO,YAAA;IACL,IAAI,eAAe,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,cAAc,EAAE;MACrD,OAAO,OAAO,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,OAAO,EAAE,SAAgB,CAAC;IACxD;GACqB;AAC1B;AAEA,CAAA,UAAiB,SAAS,EAAA;EACX,SAAA,CAAA,GAAG,GAAG,iBAAiB,CAAC,KAAK,CAAC;EAC9B,SAAA,CAAA,IAAI,GAAG,iBAAiB,CAAC,MAAM,CAAC;EAChC,SAAA,CAAA,KAAK,GAAG,iBAAiB,CAAC,OAAO,CAAC;AACjD,CAAC,EAJgB,SAAS,KAAT,SAAS,GAAA,CAAA,CAAA,CAAA,CAAA;SAMV,YAAY,CAAC,KAAqB,EAAA;EAChD,IAAM,GAAG,GAAG,eAAe,CAAC,cAAc,CAAC;EAC3C,cAAc,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,eAAe,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;EAC5D,OAAO,GAAG;AACZ;AAEA;AACA;AACA;AACA;AACA;AACA;IACa,WAAW,GAItB,OAAO,OAAO,KAAK,QAAQ,IAC3B,OAAO,OAAO,CAAC,GAAG,KAAK,QAAQ,GAC7B,OAAO,GAAG;EAAE,GAAG,EAAE,CAAA;AAAE,CAAA;AAIvB,IAAA,WAAA,GAAe,SAAS","sourcesContent":["const genericMessage = \"Invariant Violation\";\nconst {\n  setPrototypeOf = function (obj: any, proto: any) {\n    obj.__proto__ = proto;\n    return obj;\n  },\n} = Object as any;\n\nexport class InvariantError extends Error {\n  framesToPop = 1;\n  name = genericMessage;\n  constructor(message: string | number = genericMessage) {\n    super(\n      typeof message === \"number\"\n        ? `${genericMessage}: ${message} (see https://github.com/apollographql/invariant-packages)`\n        : message\n    );\n    setPrototypeOf(this, InvariantError.prototype);\n  }\n}\n\nexport function invariant(\n  condition: any,\n  message?: string | number,\n): asserts condition {\n  if (!condition) {\n    throw new InvariantError(message);\n  }\n}\n\nconst verbosityLevels = [\"log\", \"warn\", \"error\", \"silent\"] as const;\ntype VerbosityLevel = (typeof verbosityLevels)[number];\ntype ConsoleMethodName = Exclude<VerbosityLevel, \"silent\">;\nlet verbosityLevel = verbosityLevels.indexOf(\"log\");\n\nfunction wrapConsoleMethod<M extends ConsoleMethodName>(method: M) {\n  return function () {\n    if (verbosityLevels.indexOf(method) >= verbosityLevel) {\n      return console[method].apply(console, arguments as any);\n    }\n  } as (typeof console)[M];\n}\n\nexport namespace invariant {\n  export const log = wrapConsoleMethod(\"log\");\n  export const warn = wrapConsoleMethod(\"warn\");\n  export const error = wrapConsoleMethod(\"error\");\n}\n\nexport function setVerbosity(level: VerbosityLevel): VerbosityLevel {\n  const old = verbosityLevels[verbosityLevel];\n  verbosityLevel = Math.max(0, verbosityLevels.indexOf(level));\n  return old;\n}\n\n// Code that uses ts-invariant with rollup-plugin-invariant may want to\n// import this process stub to avoid errors evaluating process.env.NODE_ENV.\n// However, because most ESM-to-CJS compilers will rewrite the process import\n// as tsInvariant.process, which prevents proper replacement by minifiers, we\n// also export processStub, so you can import { invariant, processStub } from\n// \"ts-invariant\" and assign processStub to a local variable named process.\nexport const processStub: {\n  env: Record<string, any>;\n  [key: string]: any;\n} = (\n  typeof process === \"object\" &&\n  typeof process.env === \"object\"\n) ? process : { env: {} };\n\nexport { processStub as process };\n\nexport default invariant;\n"]},"metadata":{},"sourceType":"module"}