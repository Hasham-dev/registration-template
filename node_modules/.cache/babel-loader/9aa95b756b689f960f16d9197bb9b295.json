{"ast":null,"code":"import { wrap } from 'optimism';\nimport { getFragmentQueryDocument } from \"../../utilities/index.js\";\nvar ApolloCache = function () {\n  function ApolloCache() {\n    this.getFragmentDoc = wrap(getFragmentQueryDocument);\n  }\n  ApolloCache.prototype.recordOptimisticTransaction = function (transaction, optimisticId) {\n    this.performTransaction(transaction, optimisticId);\n  };\n  ApolloCache.prototype.transformDocument = function (document) {\n    return document;\n  };\n  ApolloCache.prototype.identify = function (object) {\n    return;\n  };\n  ApolloCache.prototype.gc = function () {\n    return [];\n  };\n  ApolloCache.prototype.modify = function (options) {\n    return false;\n  };\n  ApolloCache.prototype.transformForLink = function (document) {\n    return document;\n  };\n  ApolloCache.prototype.readQuery = function (options, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = !!options.optimistic;\n    }\n    return this.read({\n      rootId: options.id || 'ROOT_QUERY',\n      query: options.query,\n      variables: options.variables,\n      returnPartialData: options.returnPartialData,\n      optimistic: optimistic\n    });\n  };\n  ApolloCache.prototype.readFragment = function (options, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = !!options.optimistic;\n    }\n    return this.read({\n      query: this.getFragmentDoc(options.fragment, options.fragmentName),\n      variables: options.variables,\n      rootId: options.id,\n      returnPartialData: options.returnPartialData,\n      optimistic: optimistic\n    });\n  };\n  ApolloCache.prototype.writeQuery = function (options) {\n    return this.write({\n      dataId: options.id || 'ROOT_QUERY',\n      result: options.data,\n      query: options.query,\n      variables: options.variables,\n      broadcast: options.broadcast\n    });\n  };\n  ApolloCache.prototype.writeFragment = function (options) {\n    return this.write({\n      dataId: options.id,\n      result: options.data,\n      variables: options.variables,\n      query: this.getFragmentDoc(options.fragment, options.fragmentName),\n      broadcast: options.broadcast\n    });\n  };\n  return ApolloCache;\n}();\nexport { ApolloCache };","map":{"version":3,"sources":["../../../src/cache/core/cache.ts"],"names":[],"mappings":"AACA,SAAS,IAAI,QAAQ,UAAU;AAE/B,SAGE,wBAAwB,QACnB,0BAAkB;AAMzB,IAAA,WAAA,GAAA,YAAA;EAAA,SAAA,WAAA,GAAA;IA2GU,IAAA,CAAA,cAAc,GAAG,IAAI,CAAC,wBAAwB,CAAC;EAsCzD;EA1FS,WAAA,CAAA,SAAA,CAAA,2BAA2B,GAAlC,UACE,WAAqC,EACrC,YAAoB,EAAA;IAEpB,IAAI,CAAC,kBAAkB,CAAC,WAAW,EAAE,YAAY,CAAC;EACpD,CAAC;EAIM,WAAA,CAAA,SAAA,CAAA,iBAAiB,GAAxB,UAAyB,QAAsB,EAAA;IAC7C,OAAO,QAAQ;EACjB,CAAC;EAEM,WAAA,CAAA,SAAA,CAAA,QAAQ,GAAf,UAAgB,MAA+B,EAAA;IAC7C;EACF,CAAC;EAEM,WAAA,CAAA,SAAA,CAAA,EAAE,GAAT,YAAA;IACE,OAAO,EAAE;EACX,CAAC;EAEM,WAAA,CAAA,SAAA,CAAA,MAAM,GAAb,UAAc,OAA4B,EAAA;IACxC,OAAO,KAAK;EACd,CAAC;EAIM,WAAA,CAAA,SAAA,CAAA,gBAAgB,GAAvB,UAAwB,QAAsB,EAAA;IAC5C,OAAO,QAAQ;EACjB,CAAC;EAQM,WAAA,CAAA,SAAA,CAAA,SAAS,GAAhB,UACE,OAAsD,EACtD,UAAiC,EAAA;IAAjC,IAAA,UAAA,KAAA,KAAA,CAAA,EAAA;MAAA,UAAA,GAAA,CAAc,CAAC,OAAO,CAAC,UAAU;IAAA;IAEjC,OAAO,IAAI,CAAC,IAAI,CAAC;MACf,MAAM,EAAE,OAAO,CAAC,EAAE,IAAI,YAAY;MAClC,KAAK,EAAE,OAAO,CAAC,KAAK;MACpB,SAAS,EAAE,OAAO,CAAC,SAAS;MAC5B,iBAAiB,EAAE,OAAO,CAAC,iBAAiB;MAC5C,UAAU,EAAA;KACX,CAAC;EACJ,CAAC;EAMM,WAAA,CAAA,SAAA,CAAA,YAAY,GAAnB,UACE,OAA4D,EAC5D,UAAiC,EAAA;IAAjC,IAAA,UAAA,KAAA,KAAA,CAAA,EAAA;MAAA,UAAA,GAAA,CAAc,CAAC,OAAO,CAAC,UAAU;IAAA;IAEjC,OAAO,IAAI,CAAC,IAAI,CAAC;MACf,KAAK,EAAE,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,QAAQ,EAAE,OAAO,CAAC,YAAY,CAAC;MAClE,SAAS,EAAE,OAAO,CAAC,SAAS;MAC5B,MAAM,EAAE,OAAO,CAAC,EAAE;MAClB,iBAAiB,EAAE,OAAO,CAAC,iBAAiB;MAC5C,UAAU,EAAA;KACX,CAAC;EACJ,CAAC;EAEM,WAAA,CAAA,SAAA,CAAA,UAAU,GAAjB,UACE,OAAmD,EAAA;IAEnD,OAAO,IAAI,CAAC,KAAK,CAAC;MAChB,MAAM,EAAE,OAAO,CAAC,EAAE,IAAI,YAAY;MAClC,MAAM,EAAE,OAAO,CAAC,IAAI;MACpB,KAAK,EAAE,OAAO,CAAC,KAAK;MACpB,SAAS,EAAE,OAAO,CAAC,SAAS;MAC5B,SAAS,EAAE,OAAO,CAAC;KACpB,CAAC;EACJ,CAAC;EAEM,WAAA,CAAA,SAAA,CAAA,aAAa,GAApB,UACE,OAAsD,EAAA;IAEtD,OAAO,IAAI,CAAC,KAAK,CAAC;MAChB,MAAM,EAAE,OAAO,CAAC,EAAE;MAClB,MAAM,EAAE,OAAO,CAAC,IAAI;MACpB,SAAS,EAAE,OAAO,CAAC,SAAS;MAC5B,KAAK,EAAE,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,QAAQ,EAAE,OAAO,CAAC,YAAY,CAAC;MAClE,SAAS,EAAE,OAAO,CAAC;KACpB,CAAC;EACJ,CAAC;EACH,OAAA,WAAC;AAAD,CAAC,EAAA","sourcesContent":["import { DocumentNode } from 'graphql';\nimport { wrap } from 'optimism';\n\nimport {\n  StoreObject,\n  Reference,\n  getFragmentQueryDocument,\n} from '../../utilities';\nimport { DataProxy } from './types/DataProxy';\nimport { Cache } from './types/Cache';\n\nexport type Transaction<T> = (c: ApolloCache<T>) => void;\n\nexport abstract class ApolloCache<TSerialized> implements DataProxy {\n  // required to implement\n  // core API\n  public abstract read<T, TVariables = any>(\n    query: Cache.ReadOptions<TVariables, T>,\n  ): T | null;\n  public abstract write<TResult = any, TVariables = any>(\n    write: Cache.WriteOptions<TResult, TVariables>,\n  ): Reference | undefined;\n  public abstract diff<T>(query: Cache.DiffOptions): Cache.DiffResult<T>;\n  public abstract watch(watch: Cache.WatchOptions): () => void;\n  public abstract reset(): Promise<void>;\n\n  // Remove whole objects from the cache by passing just options.id, or\n  // specific fields by passing options.field and/or options.args. If no\n  // options.args are provided, all fields matching options.field (even\n  // those with arguments) will be removed. Returns true iff any data was\n  // removed from the cache.\n  public abstract evict(options: Cache.EvictOptions): boolean;\n\n  // intializer / offline / ssr API\n  /**\n   * Replaces existing state in the cache (if any) with the values expressed by\n   * `serializedState`.\n   *\n   * Called when hydrating a cache (server side rendering, or offline storage),\n   * and also (potentially) during hot reloads.\n   */\n  public abstract restore(\n    serializedState: TSerialized,\n  ): ApolloCache<TSerialized>;\n\n  /**\n   * Exposes the cache's complete state, in a serializable format for later restoration.\n   */\n  public abstract extract(optimistic?: boolean): TSerialized;\n\n  // Optimistic API\n\n  public abstract removeOptimistic(id: string): void;\n\n  // Transactional API\n\n  public abstract performTransaction(\n    transaction: Transaction<TSerialized>,\n    // Although subclasses may implement recordOptimisticTransaction\n    // however they choose, the default implementation simply calls\n    // performTransaction with a string as the second argument, allowing\n    // performTransaction to handle both optimistic and non-optimistic\n    // (broadcast-batching) transactions. Passing null for optimisticId is\n    // also allowed, and indicates that performTransaction should apply\n    // the transaction non-optimistically (ignoring optimistic data).\n    optimisticId?: string | null,\n  ): void;\n\n  public recordOptimisticTransaction(\n    transaction: Transaction<TSerialized>,\n    optimisticId: string,\n  ) {\n    this.performTransaction(transaction, optimisticId);\n  }\n\n  // Optional API\n\n  public transformDocument(document: DocumentNode): DocumentNode {\n    return document;\n  }\n\n  public identify(object: StoreObject | Reference): string | undefined {\n    return;\n  }\n\n  public gc(): string[] {\n    return [];\n  }\n\n  public modify(options: Cache.ModifyOptions): boolean {\n    return false;\n  }\n\n  // Experimental API\n\n  public transformForLink(document: DocumentNode): DocumentNode {\n    return document;\n  }\n\n  // DataProxy API\n  /**\n   *\n   * @param options\n   * @param optimistic\n   */\n  public readQuery<QueryType, TVariables = any>(\n    options: Cache.ReadQueryOptions<QueryType, TVariables>,\n    optimistic = !!options.optimistic,\n  ): QueryType | null {\n    return this.read({\n      rootId: options.id || 'ROOT_QUERY',\n      query: options.query,\n      variables: options.variables,\n      returnPartialData: options.returnPartialData,\n      optimistic,\n    });\n  }\n\n  // Make sure we compute the same (===) fragment query document every\n  // time we receive the same fragment in readFragment.\n  private getFragmentDoc = wrap(getFragmentQueryDocument);\n\n  public readFragment<FragmentType, TVariables = any>(\n    options: Cache.ReadFragmentOptions<FragmentType, TVariables>,\n    optimistic = !!options.optimistic,\n  ): FragmentType | null {\n    return this.read({\n      query: this.getFragmentDoc(options.fragment, options.fragmentName),\n      variables: options.variables,\n      rootId: options.id,\n      returnPartialData: options.returnPartialData,\n      optimistic,\n    });\n  }\n\n  public writeQuery<TData = any, TVariables = any>(\n    options: Cache.WriteQueryOptions<TData, TVariables>,\n  ): Reference | undefined {\n    return this.write({\n      dataId: options.id || 'ROOT_QUERY',\n      result: options.data,\n      query: options.query,\n      variables: options.variables,\n      broadcast: options.broadcast,\n    });\n  }\n\n  public writeFragment<TData = any, TVariables = any>(\n    options: Cache.WriteFragmentOptions<TData, TVariables>,\n  ): Reference | undefined {\n    return this.write({\n      dataId: options.id,\n      result: options.data,\n      variables: options.variables,\n      query: this.getFragmentDoc(options.fragment, options.fragmentName),\n      broadcast: options.broadcast,\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}